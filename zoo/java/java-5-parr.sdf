module Main

exports
 context-free start-symbols compilationUnit
  sorts
        CompilationUnit Annotations Annotation AnnotationName Identifier Letter JavaIDDigit ElementValuePairs ElementValuePair ElementValue ConditionalExpression ConditionalOrExpression ConditionalAndExpression InclusiveOrExpression ExclusiveOrExpression AndExpression EqualityExpression InstanceOfExpression RelationalExpression ShiftExpression AdditiveExpression MultiplicativeExpression UnaryExpression UnaryExpressionNotPlusMinus CastExpression PrimitiveType Type ClassOrInterfaceType TypeArguments TypeArgument Expression AssignmentOperator Primary ParExpression IdentifierSuffix Arguments ExpressionList ExplicitGenericInvocation NonWildcardTypeArguments TypeList InnerCreator ClassCreatorRest ClassBody ClassBodyDeclaration Block BlockStatement LocalVariableDeclarationStatement LocalVariableDeclaration VariableModifiers VariableModifier VariableDeclarators VariableDeclarator VariableDeclaratorId VariableInitializer ArrayInitializer ClassOrInterfaceDeclaration ClassOrInterfaceModifiers ClassOrInterfaceModifier ClassDeclaration NormalClassDeclaration TypeParameters TypeParameter TypeBound EnumDeclaration ENUM EnumBody EnumConstants EnumConstant EnumBodyDeclarations InterfaceDeclaration NormalInterfaceDeclaration InterfaceBody InterfaceBodyDeclaration Modifiers Modifier InterfaceMemberDecl InterfaceMethodOrFieldDecl InterfaceMethodOrFieldRest ConstantDeclaratorsRest ConstantDeclaratorRest ConstantDeclarator InterfaceMethodDeclaratorRest FormalParameters FormalParameterDecls FormalParameterDeclsRest QualifiedNameList QualifiedName InterfaceGenericMethodDecl VoidInterfaceMethodDeclaratorRest AnnotationTypeDeclaration AnnotationTypeBody AnnotationTypeElementDeclaration AnnotationTypeElementRest AnnotationMethodOrConstantRest AnnotationMethodRest DefaultValue AnnotationConstantRest Statement ASSERT ForControl EnhancedForControl ForInit ForUpdate Catches CatchClause FormalParameter SwitchBlockStatementGroups SwitchBlockStatementGroup SwitchLabel ConstantExpression EnumConstantName StatementExpression MemberDecl GenericMethodOrConstructorDecl GenericMethodOrConstructorRest MethodDeclaratorRest MethodBody ConstructorDeclaratorRest ConstructorBody ExplicitConstructorInvocation MemberDeclaration MethodDeclaration FieldDeclaration VoidMethodDeclaratorRest SuperSuffix Literal IntegerLiteral HexLiteral HexDigit IntegerTypeSuffix OctalLiteral DecimalLiteral FloatingPointLiteral Exponent FloatTypeSuffix CharacterLiteral EscapeSequence UnicodeEscape OctalEscape StringLiteral BooleanLiteral Creator CreatedName ArrayCreatorRest Selector ShiftOp RelationalOp ElementValueArrayInitializer PackageDeclaration ImportDeclaration TypeDeclaration 
  context-free syntax
        Annotations ((PackageDeclaration ImportDeclaration* TypeDeclaration*) | (ClassOrInterfaceDeclaration TypeDeclaration*))
		| PackageDeclaration? ImportDeclaration* TypeDeclaration* -> CompilationUnit

        Annotation+ -> Annotations

        "@" AnnotationName ("(" (ElementValuePairs | ElementValue)? ")")? -> Annotation

        Identifier ("." Identifier)* -> AnnotationName

        Letter (Letter | JavaIDDigit)* -> Identifier

        "a"
		| "b"
		| "c"
		| "d"
		| "e"
		| "f"
		| "g"
		| "h"
		| "i"
		| "j"
		| "k"
		| "l"
		| "m"
		| "n"
		| "o"
		| "p"
		| "q"
		| "r"
		| "s"
		| "t"
		| "u"
		| "v"
		| "w"
		| "x"
		| "y"
		| "z"
		| "A"
		| "B"
		| "C"
		| "D"
		| "E"
		| "F"
		| "G"
		| "H"
		| "I"
		| "J"
		| "K"
		| "L"
		| "M"
		| "N"
		| "O"
		| "P"
		| "Q"
		| "R"
		| "S"
		| "T"
		| "U"
		| "V"
		| "W"
		| "X"
		| "Y"
		| "Z" -> Letter

        "0"
		| "1"
		| "2"
		| "3"
		| "4"
		| "5"
		| "6"
		| "7"
		| "8"
		| "9"
		| "a"
		| "b"
		| "c"
		| "d"
		| "e"
		| "f"
		| "g"
		| "h"
		| "i"
		| "j"
		| "k"
		| "l"
		| "m"
		| "n"
		| "o"
		| "p"
		| "q"
		| "r"
		| "s"
		| "t"
		| "u"
		| "v"
		| "w"
		| "x"
		| "y"
		| "z"
		| "A"
		| "B"
		| "C"
		| "D"
		| "E"
		| "F"
		| "G"
		| "H"
		| "I"
		| "J"
		| "K"
		| "L"
		| "M"
		| "N"
		| "O"
		| "P"
		| "Q"
		| "R"
		| "S"
		| "T"
		| "U"
		| "V"
		| "W"
		| "X"
		| "Y"
		| "Z" -> JavaIDDigit

        ElementValuePair ("," ElementValuePair)* -> ElementValuePairs

        Identifier "=" ElementValue -> ElementValuePair

        ConditionalExpression
		| Annotation
		| ElementValueArrayInitializer -> ElementValue

        ConditionalOrExpression ("?" Expression ":" Expression)? -> ConditionalExpression

        ConditionalAndExpression ("||" ConditionalAndExpression)* -> ConditionalOrExpression

        InclusiveOrExpression ("&&" InclusiveOrExpression)* -> ConditionalAndExpression

        ExclusiveOrExpression ("|" ExclusiveOrExpression)* -> InclusiveOrExpression

        AndExpression ("^" AndExpression)* -> ExclusiveOrExpression

        EqualityExpression ("&" EqualityExpression)* -> AndExpression

        InstanceOfExpression (("==" | "!=") InstanceOfExpression)* -> EqualityExpression

        RelationalExpression ("instanceof" Type)? -> InstanceOfExpression

        ShiftExpression (RelationalOp ShiftExpression)* -> RelationalExpression

        AdditiveExpression (ShiftOp AdditiveExpression)* -> ShiftExpression

        MultiplicativeExpression (("+" | "-") MultiplicativeExpression)* -> AdditiveExpression

        UnaryExpression (("*" | "/" | "%") UnaryExpression)* -> MultiplicativeExpression

        "+" UnaryExpression
		| "-" UnaryExpression
		| "++" UnaryExpression
		| "--" UnaryExpression
		| UnaryExpressionNotPlusMinus -> UnaryExpression

        "~" UnaryExpression
		| "!" UnaryExpression
		| CastExpression
		| Primary Selector* ("++" | "--")? -> UnaryExpressionNotPlusMinus

        "(" PrimitiveType ")" UnaryExpression
		| "(" (Type | Expression) ")" UnaryExpressionNotPlusMinus -> CastExpression

        "boolean"
		| "char"
		| "byte"
		| "short"
		| "int"
		| "long"
		| "float"
		| "double" -> PrimitiveType

        ClassOrInterfaceType ("[" "]")*
		| PrimitiveType ("[" "]")* -> Type

        Identifier TypeArguments? ("." Identifier TypeArguments?)* -> ClassOrInterfaceType

        "<" TypeArgument ("," TypeArgument)* ">" -> TypeArguments

        Type
		| "?" (("extends" | "super") Type)? -> TypeArgument

        ConditionalExpression (AssignmentOperator Expression)? -> Expression

        "="
		| "+="
		| "-="
		| "*="
		| "/="
		| "&="
		| "|="
		| "^="
		| "%="
		| t1::"<" t2::"<" t3::"="
		| t1::">" t2::">" t3::">" t4::("="?)
		| t1::">" t2::">" t3::"=" -> AssignmentOperator

        ParExpression
		| "this" ("." Identifier)* IdentifierSuffix?
		| "super" SuperSuffix
		| Literal
		| "new" Creator
		| Identifier ("." Identifier)* IdentifierSuffix?
		| PrimitiveType ("[" "]")* "." "class"
		| "void" "." "class" -> Primary

        "(" Expression ")" -> ParExpression

        ("[" "]")+ "." "class"
		| ("[" Expression "]")+
		| Arguments
		| "." "class"
		| "." ExplicitGenericInvocation
		| "." "this"
		| "." "super" Arguments
		| "." "new" InnerCreator -> IdentifierSuffix

        "(" ExpressionList? ")" -> Arguments

        Expression ("," Expression)* -> ExpressionList

        NonWildcardTypeArguments Identifier Arguments -> ExplicitGenericInvocation

        "<" TypeList ">" -> NonWildcardTypeArguments

        Type ("," Type)* -> TypeList

        NonWildcardTypeArguments? Identifier ClassCreatorRest -> InnerCreator

        Arguments ClassBody? -> ClassCreatorRest

        "{" ClassBodyDeclaration* "}" -> ClassBody

        ";"
		| "static"? Block
		| Modifiers MemberDecl -> ClassBodyDeclaration

        "{" BlockStatement* "}" -> Block

        LocalVariableDeclarationStatement
		| ClassOrInterfaceDeclaration
		| Statement -> BlockStatement

        LocalVariableDeclaration ";" -> LocalVariableDeclarationStatement

        VariableModifiers Type VariableDeclarators -> LocalVariableDeclaration

        VariableModifier* -> VariableModifiers

        "final"
		| Annotation -> VariableModifier

        VariableDeclarator ("," VariableDeclarator)* -> VariableDeclarators

        VariableDeclaratorId ("=" VariableInitializer)? -> VariableDeclarator

        Identifier ("[" "]")* -> VariableDeclaratorId

        ArrayInitializer
		| Expression -> VariableInitializer

        "{" (VariableInitializer ("," VariableInitializer)* ","?)? "}" -> ArrayInitializer

        ClassOrInterfaceModifiers (ClassDeclaration | InterfaceDeclaration) -> ClassOrInterfaceDeclaration

        ClassOrInterfaceModifier* -> ClassOrInterfaceModifiers

        Annotation
		| "public"
		| "protected"
		| "private"
		| "abstract"
		| "static"
		| "final"
		| "strictfp" -> ClassOrInterfaceModifier

        NormalClassDeclaration
		| EnumDeclaration -> ClassDeclaration

        "class" Identifier TypeParameters? ("extends" Type)? ("implements" TypeList)? ClassBody -> NormalClassDeclaration

        "<" TypeParameter ("," TypeParameter)* ">" -> TypeParameters

        Identifier ("extends" TypeBound)? -> TypeParameter

        Type ("&" Type)* -> TypeBound

        ENUM Identifier ("implements" TypeList)? EnumBody -> EnumDeclaration

        "enum" -> ENUM

        "{" EnumConstants? ","? EnumBodyDeclarations? "}" -> EnumBody

        EnumConstant ("," EnumConstant)* -> EnumConstants

        Annotations? Identifier Arguments? ClassBody? -> EnumConstant

        ";" ClassBodyDeclaration* -> EnumBodyDeclarations

        NormalInterfaceDeclaration
		| AnnotationTypeDeclaration -> InterfaceDeclaration

        "interface" Identifier TypeParameters? ("extends" TypeList)? InterfaceBody -> NormalInterfaceDeclaration

        "{" InterfaceBodyDeclaration* "}" -> InterfaceBody

        Modifiers InterfaceMemberDecl
		| ";" -> InterfaceBodyDeclaration

        Modifier* -> Modifiers

        Annotation
		| "public"
		| "protected"
		| "private"
		| "static"
		| "abstract"
		| "final"
		| "native"
		| "synchronized"
		| "transient"
		| "volatile"
		| "strictfp" -> Modifier

        InterfaceMethodOrFieldDecl
		| InterfaceGenericMethodDecl
		| "void" Identifier VoidInterfaceMethodDeclaratorRest
		| InterfaceDeclaration
		| ClassDeclaration -> InterfaceMemberDecl

        Type Identifier InterfaceMethodOrFieldRest -> InterfaceMethodOrFieldDecl

        ConstantDeclaratorsRest ";"
		| InterfaceMethodDeclaratorRest -> InterfaceMethodOrFieldRest

        ConstantDeclaratorRest ("," ConstantDeclarator)* -> ConstantDeclaratorsRest

        ("[" "]")* "=" VariableInitializer -> ConstantDeclaratorRest

        Identifier ConstantDeclaratorRest -> ConstantDeclarator

        FormalParameters ("[" "]")* ("throws" QualifiedNameList)? ";" -> InterfaceMethodDeclaratorRest

        "(" FormalParameterDecls? ")" -> FormalParameters

        VariableModifiers Type FormalParameterDeclsRest -> FormalParameterDecls

        VariableDeclaratorId ("," FormalParameterDecls)?
		| "..." VariableDeclaratorId -> FormalParameterDeclsRest

        QualifiedName ("," QualifiedName)* -> QualifiedNameList

        Identifier ("." Identifier)* -> QualifiedName

        TypeParameters (Type | "void") Identifier InterfaceMethodDeclaratorRest -> InterfaceGenericMethodDecl

        FormalParameters ("throws" QualifiedNameList)? ";" -> VoidInterfaceMethodDeclaratorRest

        "@" "interface" Identifier AnnotationTypeBody -> AnnotationTypeDeclaration

        "{" AnnotationTypeElementDeclaration* "}" -> AnnotationTypeBody

        Modifiers AnnotationTypeElementRest -> AnnotationTypeElementDeclaration

        Type AnnotationMethodOrConstantRest ";"
		| NormalClassDeclaration ";"?
		| NormalInterfaceDeclaration ";"?
		| EnumDeclaration ";"?
		| AnnotationTypeDeclaration ";"? -> AnnotationTypeElementRest

        AnnotationMethodRest
		| AnnotationConstantRest -> AnnotationMethodOrConstantRest

        Identifier "(" ")" DefaultValue? -> AnnotationMethodRest

        "default" ElementValue -> DefaultValue

        VariableDeclarators -> AnnotationConstantRest

        Block
		| ASSERT Expression (":" Expression)? ";"
		| "if" ParExpression Statement ("else" Statement)?
		| "for" "(" ForControl ")" Statement
		| "while" ParExpression Statement
		| "do" Statement "while" ParExpression ";"
		| "try" Block ((Catches "finally" Block) | Catches | ("finally" Block))
		| "switch" ParExpression "{" SwitchBlockStatementGroups "}"
		| "synchronized" ParExpression Block
		| "return" Expression? ";"
		| "throw" Expression ";"
		| "break" Identifier? ";"
		| "continue" Identifier? ";"
		| ";"
		| StatementExpression ";"
		| Identifier ":" Statement -> Statement

        "assert" -> ASSERT

        EnhancedForControl
		| ForInit? ";" Expression? ";" ForUpdate? -> ForControl

        VariableModifiers Type Identifier ":" Expression -> EnhancedForControl

        LocalVariableDeclaration
		| ExpressionList -> ForInit

        ExpressionList -> ForUpdate

        CatchClause CatchClause* -> Catches

        "catch" "(" FormalParameter ")" Block -> CatchClause

        VariableModifiers Type VariableDeclaratorId -> FormalParameter

        SwitchBlockStatementGroup* -> SwitchBlockStatementGroups

        SwitchLabel+ BlockStatement* -> SwitchBlockStatementGroup

        "case" ConstantExpression ":"
		| "case" EnumConstantName ":"
		| "default" ":" -> SwitchLabel

        Expression -> ConstantExpression

        Identifier -> EnumConstantName

        Expression -> StatementExpression

        GenericMethodOrConstructorDecl
		| MemberDeclaration
		| "void" Identifier VoidMethodDeclaratorRest
		| Identifier ConstructorDeclaratorRest
		| InterfaceDeclaration
		| ClassDeclaration -> MemberDecl

        TypeParameters GenericMethodOrConstructorRest -> GenericMethodOrConstructorDecl

        (Type | "void") Identifier MethodDeclaratorRest
		| Identifier ConstructorDeclaratorRest -> GenericMethodOrConstructorRest

        FormalParameters ("[" "]")* ("throws" QualifiedNameList)? (MethodBody | ";") -> MethodDeclaratorRest

        Block -> MethodBody

        FormalParameters ("throws" QualifiedNameList)? ConstructorBody -> ConstructorDeclaratorRest

        "{" ExplicitConstructorInvocation? BlockStatement* "}" -> ConstructorBody

        NonWildcardTypeArguments? ("this" | "super") Arguments ";"
		| Primary "." NonWildcardTypeArguments? "super" Arguments ";" -> ExplicitConstructorInvocation

        Type (MethodDeclaration | FieldDeclaration) -> MemberDeclaration

        Identifier MethodDeclaratorRest -> MethodDeclaration

        VariableDeclarators ";" -> FieldDeclaration

        FormalParameters ("throws" QualifiedNameList)? (MethodBody | ";") -> VoidMethodDeclaratorRest

        Arguments
		| "." Identifier Arguments? -> SuperSuffix

        IntegerLiteral
		| FloatingPointLiteral
		| CharacterLiteral
		| StringLiteral
		| BooleanLiteral
		| "null" -> Literal

        HexLiteral
		| OctalLiteral
		| DecimalLiteral -> IntegerLiteral

        "0" ("x" | "X") HexDigit+ IntegerTypeSuffix? -> HexLiteral

        "0"
		| "1"
		| "2"
		| "3"
		| "4"
		| "5"
		| "6"
		| "7"
		| "8"
		| "9"
		| "a"
		| "b"
		| "c"
		| "d"
		| "e"
		| "f"
		| "A"
		| "B"
		| "C"
		| "D"
		| "E"
		| "F" -> HexDigit

        "l"
		| "L" -> IntegerTypeSuffix

        "0" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")+ IntegerTypeSuffix? -> OctalLiteral

        ("0" | (("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9") ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*)) IntegerTypeSuffix? -> DecimalLiteral

        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* Exponent? FloatTypeSuffix?
		| "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ Exponent? FloatTypeSuffix?
		| ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ Exponent FloatTypeSuffix?
		| ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ FloatTypeSuffix -> FloatingPointLiteral

        ("e" | "E") ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ -> Exponent

        "f"
		| "F"
		| "d"
		| "D" -> FloatTypeSuffix

        "\'" (EscapeSequence | STR) "\'" -> CharacterLiteral

        "\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\")
		| UnicodeEscape
		| OctalEscape -> EscapeSequence

        "\\" "u" HexDigit HexDigit HexDigit HexDigit -> UnicodeEscape

        "\\" ("0" | "1" | "2" | "3") ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7") ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")
		| "\\" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7") ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")
		| "\\" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7") -> OctalEscape

        """ (EscapeSequence | STR)* """ -> StringLiteral

        "true"
		| "false" -> BooleanLiteral

        NonWildcardTypeArguments CreatedName ClassCreatorRest
		| CreatedName (ArrayCreatorRest | ClassCreatorRest) -> Creator

        ClassOrInterfaceType
		| PrimitiveType -> CreatedName

        "[" (("]" ("[" "]")* ArrayInitializer) | (Expression "]" ("[" Expression "]")* ("[" "]")*)) -> ArrayCreatorRest

        "." Identifier Arguments?
		| "." "this"
		| "." "super" SuperSuffix
		| "." "new" InnerCreator
		| "[" Expression "]" -> Selector

        t1::"<" t2::("<"?)
		| t1::">" t2::">" t3::">"
		| t1::">" t2::(">"?) -> ShiftOp

        t1::"<" t2::("="?)
		| t1::">" t2::("="?)
		| "<"
		| ">" -> RelationalOp

        "{" (ElementValue ("," ElementValue)*)? ","? "}" -> ElementValueArrayInitializer

        "package" QualifiedName ";" -> PackageDeclaration

        "import" "static"? QualifiedName ("." "*")? ";" -> ImportDeclaration

        ClassOrInterfaceDeclaration
		| ";" -> TypeDeclaration
