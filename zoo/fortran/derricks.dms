ExecutableProgram = StartCommentBlock? ProgramUnit+ ;
ProgramUnit = MainProgram ;
ProgramUnit = FunctionSubprogram ;
ProgramUnit = SubroutineSubprogram ;
ProgramUnit = Module ;
ProgramUnit = BlockDataSubprogram ;
MainProgram = ProgramStmt? MainRange ;
ProgramStmt = LblDef 'program' ProgramName EOS ;
LblDef = Label? ;
ProgramName = Ident ;
MainRange = BodyConstruct+ EndProgramStmt ;
MainRange = InternalSubProgPart EndProgramStmt ;
MainRange = EndProgramStmt ;
BodyConstruct = SpecificationPartConstruct ;
BodyConstruct = ExecutableConstruct ;
SpecificationPartConstruct = ImplicitStmt ;
SpecificationPartConstruct = ParameterStmt ;
SpecificationPartConstruct = FormatStmt ;
SpecificationPartConstruct = EntryStmt ;
SpecificationPartConstruct = DeclarationConstruct ;
SpecificationPartConstruct = UseStmt ;
ImplicitStmt = LblDef 'implicit' 'none' EOS ;
ImplicitStmt = LblDef 'implicit' ImplicitSpec (',' ImplicitSpec)* EOS ;
ImplicitSpec = TypeSpec '(' LetterSpec (',' LetterSpec)* ')' ;
TypeSpec = 'integer' KindSelector ;
TypeSpec = 'real' KindSelector ;
TypeSpec = 'double' 'precision' ;
TypeSpec = 'complex' KindSelector ;
TypeSpec = 'character' CharSelector ;
TypeSpec = 'logical' KindSelector ;
TypeSpec = 'type' '(' TypeName ')' ;
TypeSpec = 'integer' ;
TypeSpec = 'real' ;
TypeSpec = 'complex' ;
TypeSpec = 'logical' ;
TypeSpec = 'character' ;
TypeSpec = 'character' LengthSelector ;
KindSelector = '(' ('kind' '=')? Expr ')' ;
KindSelector = '*' Icon ;
Expr = (Expr DefinedBinaryOp)? Level5Expr ;
DefinedBinaryOp = Dop ;
Level5Expr = (Level5Expr EquivOp)? EquivOperand ;
EquivOp = '.eqv.' ;
EquivOp = '.neqv.' ;
EquivOperand = (EquivOperand OrOp)? OrOperand ;
OrOp = '.or.' ;
OrOperand = (OrOperand AndOp)? AndOperand ;
AndOp = '.and.' ;
AndOperand = NotOp? Level4Expr ;
NotOp = '.not.' ;
Level4Expr = (Level3Expr RelOp)? Level3Expr ;
Level3Expr = (Level3Expr ConcatOp)? Level2Expr ;
ConcatOp = '//' ;
Level2Expr = (Level2Expr AddOp)? AddOperand ;
Level2Expr = Sign AddOperand ;
AddOp = '+' ;
AddOp = '-' ;
AddOperand = (AddOperand MultOp)? MultOperand ;
MultOp = '*' ;
MultOp = '/' ;
MultOperand = Level1Expr (PowerOp MultOperand)? ;
Level1Expr = DefinedUnaryOp? Primary ;
DefinedUnaryOp = Dop ;
Primary = ArrayConstructor ;
Primary = UnsignedArithmeticConstant ;
Primary = Name ;
Primary = DataRef ;
Primary = FunctionReference ;
Primary = '(' Expr ')' ;
Primary = Scon ;
Primary = LogicalConstant ;
ArrayConstructor = '(/' AcValueList '/)' ;
AcValueList = AcValue (',' AcValue)* ;
AcValue = Expr ;
AcValue = AcImpliedDo ;
AcImpliedDo = '(' Expr ',' ImpliedDoVariable '=' Expr ',' Expr ')' ;
AcImpliedDo = '(' Expr ',' ImpliedDoVariable '=' Expr ',' Expr ',' Expr ')' ;
AcImpliedDo = '(' AcImpliedDo ',' ImpliedDoVariable '=' Expr ',' Expr ')' ;
AcImpliedDo = '(' AcImpliedDo ',' ImpliedDoVariable '=' Expr ',' Expr ',' Expr ')' ;
ImpliedDoVariable = Ident ;
UnsignedArithmeticConstant = Icon '_' KindParam ;
UnsignedArithmeticConstant = Rcon '_' KindParam ;
UnsignedArithmeticConstant = Icon ;
UnsignedArithmeticConstant = Rcon ;
UnsignedArithmeticConstant = ComplexConst ;
KindParam = Icon ;
KindParam = NamedConstantUse ;
NamedConstantUse = Ident ;
ComplexConst = '(' Expr ',' Expr ')' ;
Name = Ident ;
DataRef = Name '%' Name ;
DataRef = DataRef '%' Name ;
DataRef = Name '(' SectionSubscriptList ')' ;
DataRef = DataRef '(' SectionSubscriptList ')' ;
SectionSubscriptList = SectionSubscript (',' SectionSubscript)* ;
SectionSubscript = Expr ;
SectionSubscript = SubscriptTriplet ;
SubscriptTriplet = Expr? ':' Expr? (':' Expr)? ;
FunctionReference = Name '(' FunctionArgList? ')' ;
FunctionArgList = FunctionArg ;
FunctionArgList = FunctionArgList ',' FunctionArg ;
FunctionArgList = SectionSubscriptList ',' FunctionArg ;
FunctionArg = Name '=' Expr ;
LogicalConstant = '.true.' '_' KindParam ;
LogicalConstant = '.false.' '_' KindParam ;
LogicalConstant = '.true.' ;
LogicalConstant = '.false.' ;
PowerOp = '**' ;
Sign = '+' ;
Sign = '-' ;
RelOp = '==' ;
RelOp = '/=' ;
RelOp = '<' ;
RelOp = '<=' ;
RelOp = '>' ;
RelOp = '>=' ;
RelOp = '.eq.' ;
RelOp = '.ne.' ;
RelOp = '.lt.' ;
RelOp = '.le.' ;
RelOp = '.gt.' ;
RelOp = '.ge.' ;
CharSelector = '(' 'len' '=' TypeParamValue ',' 'kind' '=' Expr ')' ;
CharSelector = '(' 'len' '=' TypeParamValue ',' Expr ')' ;
CharSelector = '(' 'len' '=' TypeParamValue ')' ;
CharSelector = '(' ('kind' '=')? Expr ')' ;
TypeParamValue = SpecificationExpr ;
TypeParamValue = '*' ;
SpecificationExpr = Expr ;
TypeName = Ident ;
LengthSelector = '(' TypeParamValue ')' ;
LengthSelector = '*' CharLength ;
CharLength = '(' TypeParamValue ')' ;
CharLength = ScalarIntLiteralConstant ;
LetterSpec = Letter ('-' Letter)? ;
ParameterStmt = LblDef 'parameter' '(' NamedConstantDefList ')' EOS ;
NamedConstantDefList = NamedConstantDef (',' NamedConstantDef)* ;
NamedConstantDef = NamedConstant '=' Expr ;
NamedConstant = Ident ;
FormatStmt = LblDef 'format' '(' FormatItemList? ')' EOS ;
FormatItemList = FormatItem (',' FormatItem)* ;
FormatItem = Icon? DataEditDescr ;
FormatItem = ControlEditDescr ;
FormatItem = CharStringEditDescr ;
FormatItem = Icon? '(' FormatItemList ')' ;
FormatItem = FormatItem ':' FormatItem ;
DataEditDescr = 'I' Icon ('.' Icon)? ;
DataEditDescr = 'O' Icon ('.' Icon)? ;
DataEditDescr = 'B' Icon ('.' Icon)? ;
DataEditDescr = 'Z' Icon ('.' Icon)? ;
DataEditDescr = 'F' Icon '.' Icon ;
DataEditDescr = 'E' Icon '.' Icon ('E' Icon)? ;
DataEditDescr = 'EN' Icon '.' Icon ('E' Icon)? ;
DataEditDescr = 'ES' Icon '.' Icon ('E' Icon)? ;
DataEditDescr = 'G' Icon '.' Icon ('E' Icon)? ;
DataEditDescr = 'L' Icon ;
DataEditDescr = 'A' Icon? ;
DataEditDescr = 'D' Icon '.' Icon ;
ControlEditDescr = PositionEditDescr ;
ControlEditDescr = Icon? '/' ;
ControlEditDescr = ':' ;
ControlEditDescr = SignEditDescr ;
ControlEditDescr = ('-' | '+')? Icon 'P' (Icon? DataEditDescr)? ;
ControlEditDescr = BlankInterpEditDescr ;
PositionEditDescr = 'T' Icon ;
PositionEditDescr = 'TL' Icon ;
PositionEditDescr = 'TR' Icon ;
PositionEditDescr = Icon 'X' ;
SignEditDescr = 'S' ;
SignEditDescr = 'SP' ;
SignEditDescr = 'SS' ;
BlankInterpEditDescr = 'BN' ;
BlankInterpEditDescr = 'BZ' ;
CharStringEditDescr = Scon ;
CharStringEditDescr = Icon 'H' Character+ ;
EntryStmt = LblDef 'entry' EntryName SubroutineParList EOS ;
EntryStmt = LblDef 'entry' EntryName SubroutineParList 'result' '(' Name ')' EOS ;
EntryName = Ident ;
SubroutineParList = '(' (SubroutinePar (',' SubroutinePar)*)? ')' ;
SubroutinePar = DummyArgName ;
SubroutinePar = '*' ;
DummyArgName = Ident ;
DeclarationConstruct = TypeDeclarationStmt ;
DeclarationConstruct = SpecificationStmt ;
DeclarationConstruct = DerivedTypeDef ;
DeclarationConstruct = InterfaceBlock ;
TypeDeclarationStmt = LblDef TypeSpec (',' AttrSpec)* ':' ':' EntityDecl (',' EntityDecl)* EOS ;
TypeDeclarationStmt = LblDef TypeSpec EntityDecl (',' EntityDecl)* EOS ;
AttrSpec = 'parameter' ;
AttrSpec = AccessSpec ;
AttrSpec = 'allocatable' ;
AttrSpec = 'dimension' '(' ArraySpec ')' ;
AttrSpec = 'external' ;
AttrSpec = 'intent' '(' IntentSpec ')' ;
AttrSpec = 'intrinsic' ;
AttrSpec = 'optional' ;
AttrSpec = 'pointer' ;
AttrSpec = 'save' ;
AttrSpec = 'target' ;
AccessSpec = 'public' ;
AccessSpec = 'private' ;
ArraySpec = AssumedShapeSpecList ;
ArraySpec = DeferredShapeSpecList ;
ArraySpec = ExplicitShapeSpecList ;
ArraySpec = AssumedSizeSpec ;
AssumedShapeSpecList = LowerBound ':' ;
AssumedShapeSpecList = DeferredShapeSpecList ',' LowerBound ':' ;
AssumedShapeSpecList = AssumedShapeSpecList ',' AssumedShapeSpec ;
LowerBound = SpecificationExpr ;
DeferredShapeSpecList = DeferredShapeSpec (',' DeferredShapeSpec)* ;
DeferredShapeSpec = ':' ;
AssumedShapeSpec = LowerBound? ':' ;
ExplicitShapeSpecList = ExplicitShapeSpec (',' ExplicitShapeSpec)* ;
ExplicitShapeSpec = (LowerBound ':')? UpperBound ;
UpperBound = SpecificationExpr ;
AssumedSizeSpec = (LowerBound ':')? '*' ;
AssumedSizeSpec = ExplicitShapeSpecList ',' '*' ;
AssumedSizeSpec = ExplicitShapeSpecList ',' LowerBound ':' '*' ;
IntentSpec = 'in' ;
IntentSpec = 'out' ;
IntentSpec = 'in' 'out' ;
EntityDecl = ObjectName '=' Expr ;
EntityDecl = ObjectName '(' ArraySpec ')' '=' Expr ;
EntityDecl = ObjectName '*' CharLength '=' Expr ;
EntityDecl = ObjectName '*' CharLength '(' ArraySpec ')' '=' Expr ;
EntityDecl = ObjectName ;
EntityDecl = ObjectName '*' CharLength ;
EntityDecl = ObjectName '(' ArraySpec ')' ;
EntityDecl = ObjectName '(' ArraySpec ')' '*' CharLength ;
ObjectName = Ident ;
SpecificationStmt = AccessStmt ;
SpecificationStmt = AllocatableStmt ;
SpecificationStmt = CommonStmt ;
SpecificationStmt = DataStmt ;
SpecificationStmt = DimensionStmt ;
SpecificationStmt = EquivalenceStmt ;
SpecificationStmt = ExternalStmt ;
SpecificationStmt = IntrinsicStmt ;
SpecificationStmt = SaveStmt ;
SpecificationStmt = IntentStmt ;
SpecificationStmt = NamelistStmt ;
SpecificationStmt = OptionalStmt ;
SpecificationStmt = PointerStmt ;
SpecificationStmt = TargetStmt ;
AccessStmt = LblDef AccessSpec ':' ':' AccessIdList EOS ;
AccessStmt = LblDef AccessSpec AccessIdList? EOS ;
AccessIdList = AccessId (',' AccessId)* ;
AccessId = GenericName ;
AccessId = GenericSpec ;
GenericName = Ident ;
GenericSpec = 'operator' '(' DefinedOperator ')' ;
GenericSpec = 'assignment' '(' '=' ')' ;
DefinedOperator = Dop ;
DefinedOperator = PowerOp ;
DefinedOperator = MultOp ;
DefinedOperator = AddOp ;
DefinedOperator = ConcatOp ;
DefinedOperator = RelOp ;
DefinedOperator = NotOp ;
DefinedOperator = AndOp ;
DefinedOperator = OrOp ;
DefinedOperator = EquivOp ;
AllocatableStmt = LblDef 'allocatable' ':' ':' ArrayAllocationList EOS ;
AllocatableStmt = LblDef 'allocatable' ArrayAllocationList EOS ;
ArrayAllocationList = ArrayAllocation (',' ArrayAllocation)* ;
ArrayAllocation = ArrayName ('(' DeferredShapeSpecList ')')? ;
ArrayName = Ident ;
CommonStmt = LblDef 'common' Comblock? CommonBlockObjectList (','? Comblock CommonBlockObjectList)* EOS ;
Comblock = '/' CommonBlockName? '/' ;
CommonBlockName = Ident ;
CommonBlockObjectList = CommonBlockObject (',' CommonBlockObject)* ;
CommonBlockObject = VariableName ;
CommonBlockObject = ArrayDeclarator ;
VariableName = Ident ;
ArrayDeclarator = VariableName '(' ArraySpec ')' ;
DataStmt = LblDef 'data' Datalist EOS ;
Datalist = DataStmtSet (',' DataStmtSet)* ;
DataStmtSet = DataStmtObjectList '/' DataStmtValueList '/' ;
DataStmtObjectList = DataStmtObject (',' DataStmtObject)* ;
DataStmtObject = Variable ;
DataStmtObject = DataImpliedDo ;
Variable = VariableName ;
Variable = VariableName '(' Subscript (',' Subscript)* ')' ;
Variable = VariableName SubstringRange ;
Variable = VariableName '(' Subscript (',' Subscript)* ')' SubstringRange ;
Subscript = Expr ;
SubstringRange = '(' SubscriptTriplet ')' ;
DataImpliedDo = '(' DataIDoObjectList ',' ImpliedDoVariable '=' Expr ',' Expr (',' Expr)? ')' ;
DataIDoObjectList = DataIDoObject (',' DataIDoObject)* ;
DataIDoObject = ArrayElement ;
DataIDoObject = DataImpliedDo ;
DataIDoObject = StructureComponent ;
ArrayElement = StructureComponent '(' SectionSubscriptList ')' ;
ArrayElement = VariableName '(' SectionSubscriptList ')' ;
StructureComponent = VariableName FieldSelector ;
StructureComponent = StructureComponent FieldSelector ;
FieldSelector = '(' SectionSubscriptList ')' '%' Name ;
FieldSelector = '%' Name ;
DataStmtValueList = DataStmtValue (',' DataStmtValue)* ;
DataStmtValue = Constant ;
DataStmtValue = NamedConstantUse '*' Constant ;
Constant = NamedConstantUse ;
Constant = UnsignedArithmeticConstant ;
Constant = '+' UnsignedArithmeticConstant ;
Constant = '-' UnsignedArithmeticConstant ;
Constant = Scon ;
Constant = LogicalConstant ;
Constant = Icon '_' Scon ;
Constant = NamedConstantUse '_' Scon ;
Constant = StructureConstructor ;
Constant = BozLiteralConstant ;
StructureConstructor = TypeName '(' Expr (',' Expr)* ')' ;
BozLiteralConstant = BinaryConstant ;
BozLiteralConstant = OctalConstant ;
BozLiteralConstant = HexConstant ;
DimensionStmt = LblDef 'dimension' ':' ':' ArrayDeclaratorList EOS ;
DimensionStmt = LblDef 'dimension' ArrayDeclaratorList EOS ;
ArrayDeclaratorList = ArrayDeclarator (',' ArrayDeclarator)* ;
EquivalenceStmt = LblDef 'equivalence' EquivalenceSetList EOS ;
EquivalenceSetList = EquivalenceSet (',' EquivalenceSet)* ;
EquivalenceSet = '(' EquivalenceObject ',' EquivalenceObject (',' EquivalenceObject)* ')' ;
EquivalenceObject = ArrayName ;
EquivalenceObject = Variable ;
ExternalStmt = LblDef 'external' ExternalName (',' ExternalName)* EOS ;
ExternalName = Ident ;
IntrinsicStmt = LblDef 'intrinsic' IntrinsicProcedureName (',' IntrinsicProcedureName)* EOS ;
IntrinsicProcedureName = Ident ;
SaveStmt = LblDef 'save' ':' ':' SavedEntityList EOS ;
SaveStmt = LblDef 'save' SavedEntityList? EOS ;
SavedEntityList = SavedEntity (',' SavedEntity)* ;
SavedEntity = VariableName ;
SavedEntity = '/' CommonBlockName '/' ;
IntentStmt = LblDef 'intent' '(' IntentSpec ')' ':' ':' IntentParList EOS ;
IntentStmt = LblDef 'intent' '(' IntentSpec ')' IntentParList EOS ;
IntentParList = IntentPar (',' IntentPar)* ;
IntentPar = DummyArgName ;
NamelistStmt = LblDef 'namelist' NamelistGroup (','? NamelistGroup)* EOS ;
NamelistGroup = '/' NamelistGroupName '/' NamelistGroupObject (',' NamelistGroupObject)* ;
NamelistGroupName = Ident ;
NamelistGroupObject = VariableName ;
OptionalStmt = LblDef 'optional' ':' ':' OptionalParList EOS ;
OptionalStmt = LblDef 'optional' OptionalParList EOS ;
OptionalParList = OptionalPar (',' OptionalPar)* ;
OptionalPar = DummyArgName ;
PointerStmt = LblDef 'pointer' ':' ':' PointerStmtObjectList EOS ;
PointerStmt = LblDef 'pointer' PointerStmtObjectList EOS ;
PointerStmtObjectList = PointerStmtObject (',' PointerStmtObject)* ;
PointerStmtObject = ObjectName ;
PointerStmtObject = ObjectName '(' DeferredShapeSpecList ')' ;
TargetStmt = LblDef 'target' ':' ':' TargetObjectList EOS ;
TargetStmt = LblDef 'target' TargetObjectList EOS ;
TargetObjectList = TargetObject (',' TargetObject)* ;
TargetObject = ObjectName ;
TargetObject = ObjectName '(' ArraySpec ')' ;
DerivedTypeDef = DerivedTypeStmt DerivedTypeBody+ EndTypeStmt ;
DerivedTypeStmt = LblDef 'type' TypeName EOS ;
DerivedTypeStmt = LblDef 'type' ':' ':' TypeName EOS ;
DerivedTypeStmt = LblDef 'type' ',' AccessSpec ':' ':' TypeName EOS ;
DerivedTypeBody = PrivateSequenceStmt ;
DerivedTypeBody = ComponentDefStmt ;
PrivateSequenceStmt = LblDef 'private' EOS ;
PrivateSequenceStmt = LblDef 'sequence' EOS ;
ComponentDefStmt = LblDef TypeSpec (',' ComponentAttrSpecList)? ':' ':' ComponentDeclList EOS ;
ComponentDefStmt = LblDef TypeSpec ComponentDeclList EOS ;
ComponentAttrSpecList = ComponentAttrSpec (',' ComponentAttrSpec)* ;
ComponentAttrSpec = 'pointer' ;
ComponentAttrSpec = 'dimension' '(' ComponentArraySpec ')' ;
ComponentArraySpec = ExplicitShapeSpecList ;
ComponentArraySpec = DeferredShapeSpecList ;
ComponentDeclList = ComponentDecl (',' ComponentDecl)* ;
ComponentDecl = ComponentName ('(' ComponentArraySpec ')')? ('*' CharLength)? ;
ComponentName = Ident ;
EndTypeStmt = LblDef 'end' 'type' TypeName? EOS ;
InterfaceBlock = InterfaceStmt InterfaceBlockPart+ EndInterfaceStmt ;
InterfaceStmt = LblDef 'interface' GenericName EOS ;
InterfaceStmt = LblDef 'interface' GenericSpec EOS ;
InterfaceStmt = LblDef 'interface' EOS ;
InterfaceBlockPart = InterfaceBody ;
InterfaceBlockPart = ModuleProcedureStmt ;
InterfaceBody = LblDef FunctionPrefix FunctionName FunctionInterfaceRange ;
InterfaceBody = LblDef 'subroutine' SubroutineName SubroutineInterfaceRange ;
FunctionPrefix = 'recursive' 'function' ;
FunctionPrefix = 'recursive' TypeSpec 'function' ;
FunctionPrefix = TypeSpec 'recursive' 'function' ;
FunctionPrefix = TypeSpec? 'function' ;
FunctionName = Ident ;
FunctionInterfaceRange = FunctionParList EOS SubprogramInterfaceBody EndFunctionStmt ;
FunctionInterfaceRange = FunctionParList EOS EndFunctionStmt ;
FunctionParList = '(' (FunctionPar (',' FunctionPar)*)? ')' ;
FunctionPar = DummyArgName ;
SubprogramInterfaceBody = SpecificationPartConstruct ;
SubprogramInterfaceBody = SubprogramInterfaceBody SpecificationPartConstruct ;
EndFunctionStmt = LblDef 'end' EOS ;
EndFunctionStmt = LblDef 'end' 'function' EndName? EOS ;
EndName = Ident ;
SubroutineName = Ident ;
SubroutineInterfaceRange = SubroutineParList EOS SubprogramInterfaceBody EndSubroutineStmt ;
SubroutineInterfaceRange = SubroutineParList EOS EndSubroutineStmt ;
EndSubroutineStmt = LblDef 'end' 'subroutine' EndName? EOS ;
EndSubroutineStmt = LblDef 'end' EOS ;
ModuleProcedureStmt = LblDef 'module' 'procedure' ProcedureNameList EOS ;
ProcedureNameList = ProcedureName (',' ProcedureName)* ;
ProcedureName = Ident ;
EndInterfaceStmt = LblDef 'end' 'interface' EOS ;
UseStmt = LblDef 'use' Name (',' RenameList)? EOS ;
UseStmt = LblDef 'use' Name ',' 'only' ':' OnlyList? EOS ;
RenameList = Rename (',' Rename)* ;
Rename = Ident '=>' UseName ;
UseName = Ident ;
OnlyList = Only (',' Only)* ;
Only = GenericSpec ;
Only = (Ident '=>')? UseName ;
ExecutableConstruct = ActionStmt ;
ExecutableConstruct = DoConstruct ;
ExecutableConstruct = IfConstruct ;
ExecutableConstruct = CaseConstruct ;
ExecutableConstruct = WhereConstruct ;
ExecutableConstruct = EndDoStmt ;
ActionStmt = AllocateStmt ;
ActionStmt = CycleStmt ;
ActionStmt = DeallocateStmt ;
ActionStmt = ExitStmt ;
ActionStmt = NullifyStmt ;
ActionStmt = PointerAssignmentStmt ;
ActionStmt = WhereStmt ;
ActionStmt = ArithmeticIfStmt ;
ActionStmt = AssignmentStmt ;
ActionStmt = AssignStmt ;
ActionStmt = BackspaceStmt ;
ActionStmt = CallStmt ;
ActionStmt = CloseStmt ;
ActionStmt = ContinueStmt ;
ActionStmt = EndfileStmt ;
ActionStmt = GotoStmt ;
ActionStmt = ComputedGotoStmt ;
ActionStmt = AssignedGotoStmt ;
ActionStmt = IfStmt ;
ActionStmt = InquireStmt ;
ActionStmt = OpenStmt ;
ActionStmt = PauseStmt ;
ActionStmt = PrintStmt ;
ActionStmt = ReadStmt ;
ActionStmt = ReturnStmt ;
ActionStmt = RewindStmt ;
ActionStmt = StopStmt ;
ActionStmt = WriteStmt ;
AllocateStmt = LblDef 'allocate' '(' AllocationList ',' 'stat' '=' Variable ')' EOS ;
AllocateStmt = LblDef 'allocate' '(' AllocationList ')' EOS ;
AllocationList = Allocation (',' Allocation)* ;
Allocation = AllocateObject AllocatedShape? ;
AllocateObject = VariableName ;
AllocateObject = AllocateObject FieldSelector ;
AllocatedShape = '(' SectionSubscriptList ')' ;
CycleStmt = LblDef 'cycle' EndName? EOS ;
DeallocateStmt = LblDef 'deallocate' '(' AllocateObjectList ',' 'stat' '=' Variable ')' EOS ;
DeallocateStmt = LblDef 'deallocate' '(' AllocateObjectList ')' EOS ;
AllocateObjectList = AllocateObject (',' AllocateObject)* ;
ExitStmt = LblDef 'exit' EndName? EOS ;
NullifyStmt = LblDef 'nullify' '(' PointerObjectList ')' EOS ;
PointerObjectList = PointerObject (',' PointerObject)* ;
PointerObject = Name ;
PointerObject = PointerField ;
PointerField = Name '(' SFExprList ')' '%' Name ;
PointerField = Name '(' SFDummyArgNameList ')' '%' Name ;
PointerField = Name '%' Name ;
PointerField = PointerField FieldSelector ;
SFExprList = SFExpr ':' Expr ':' Expr ;
SFExprList = SFExpr ':' ':' Expr ;
SFExprList = ':' Expr ':' Expr ;
SFExprList = ':' ':' Expr ;
SFExprList = ':' ;
SFExprList = ':' Expr ;
SFExprList = SFExpr ;
SFExprList = SFExpr ':' ;
SFExprList = SFExpr ':' Expr ;
SFExprList = SFExprList ',' SectionSubscript ;
SFExprList = SFDummyArgNameList ',' ':' ;
SFExprList = SFDummyArgNameList ',' ':' Expr ;
SFExprList = SFDummyArgNameList ',' SFExpr ':' ;
SFExprList = SFDummyArgNameList ',' SFExpr ':' Expr ;
SFExpr = SFTerm ;
SFExpr = Sign AddOperand ;
SFExpr = SFExpr AddOp AddOperand ;
SFTerm = SFFactor ;
SFTerm = SFTerm MultOp MultOperand ;
SFFactor = SFPrimary ;
SFFactor = SFPrimary PowerOp MultOperand ;
SFPrimary = ArrayConstructor ;
SFPrimary = Icon ;
SFPrimary = Name ;
SFPrimary = DataRef ;
SFPrimary = FunctionReference ;
SFPrimary = '(' Expr ')' ;
SFDummyArgNameList = SFDummyArgName (',' SFDummyArgName)* ;
SFDummyArgName = Ident ;
PointerAssignmentStmt = LblDef Name '=>' Target EOS ;
PointerAssignmentStmt = LblDef Name '%' Name '=>' Target EOS ;
PointerAssignmentStmt = LblDef Name '%' DataRef '=>' Target EOS ;
PointerAssignmentStmt = LblDef Name '(' SFExprList ')' '%' Name '=>' Target EOS ;
PointerAssignmentStmt = LblDef Name '(' SFExprList ')' '%' DataRef '=>' Target EOS ;
PointerAssignmentStmt = LblDef Name '(' SFDummyArgNameList ')' '%' Name '=>' Target EOS ;
PointerAssignmentStmt = LblDef Name '(' SFDummyArgNameList ')' '%' DataRef '=>' Target EOS ;
Target = Expr ;
WhereStmt = LblDef 'where' '(' MaskExpr ')' AssignmentStmt ;
MaskExpr = Expr ;
AssignmentStmt = LblDef Name '%' Name '=' Expr EOS ;
AssignmentStmt = LblDef Name '%' DataRef '=' Expr EOS ;
AssignmentStmt = LblDef Name '(' SFExprList ')' '%' Name '=' Expr EOS ;
AssignmentStmt = LblDef Name '(' SFExprList ')' '%' DataRef '=' Expr EOS ;
AssignmentStmt = LblDef Name '(' SFDummyArgNameList ')' '%' Name '=' Expr EOS ;
AssignmentStmt = LblDef Name '(' SFDummyArgNameList ')' '%' DataRef '=' Expr EOS ;
AssignmentStmt = LblDef Name '=' Expr EOS ;
AssignmentStmt = LblDef Name '(' SFExprList ')' '=' Expr EOS ;
AssignmentStmt = LblDef Name '(' SFExprList ')' SubstringRange '=' Expr EOS ;
ArithmeticIfStmt = LblDef 'if' '(' ScalarNumericExpr ')' LblRef ',' LblRef ',' LblRef EOS ;
ScalarNumericExpr = Expr ;
LblRef = Icon ;
AssignStmt = LblDef 'assign' LblRef 'to' VariableName EOS ;
BackspaceStmt = LblDef 'backspace' UnitIdentifier EOS ;
BackspaceStmt = LblDef 'backspace' '(' PositionSpec (',' PositionSpec)* ')' EOS ;
UnitIdentifier = UFExpr ;
UnitIdentifier = '*' ;
UFExpr = UFTerm ;
UFExpr = Sign UFTerm ;
UFExpr = UFExpr AddOp UFTerm ;
UFTerm = UFFactor ;
UFTerm = UFTerm MultOp UFFactor ;
UFTerm = UFTerm ConcatOp UFPrimary ;
UFFactor = UFPrimary ;
UFFactor = UFPrimary PowerOp UFFactor ;
UFPrimary = Icon ;
UFPrimary = Scon ;
UFPrimary = Name ;
UFPrimary = FunctionReference ;
UFPrimary = DataRef ;
UFPrimary = '(' UFExpr ')' ;
PositionSpec = 'unit='? UnitIdentifier ;
PositionSpec = 'iostat=' ScalarVariable ;
PositionSpec = 'err=' LblRef ;
ScalarVariable = VariableName ;
ScalarVariable = ArrayElement ;
CallStmt = LblDef 'call' SubroutineNameUse EOS ;
CallStmt = LblDef 'call' SubroutineNameUse '(' (ActualArg (',' ActualArg)*)? ')' EOS ;
SubroutineNameUse = Ident ;
ActualArg = (Name '=')? Expr ;
ActualArg = (Name '=')? '*' LblRef ;
CloseStmt = LblDef 'close' '(' CloseSpecList ')' EOS ;
CloseSpecList = CloseSpec (',' CloseSpec)* ;
CloseSpec = UnitIdentifier ;
CloseSpec = 'unit' '=' UnitIdentifier ;
CloseSpec = 'iostat' '=' ScalarVariable ;
CloseSpec = 'err' '=' LblRef ;
CloseSpec = 'status' '=' CExpr ;
CExpr = (CExpr ConcatOp)? CPrimary ;
CPrimary = COperand ;
CPrimary = '(' CExpr ')' ;
COperand = Scon ;
COperand = Name ;
COperand = DataRef ;
COperand = FunctionReference ;
ContinueStmt = LblDef 'continue' EOS ;
EndfileStmt = LblDef 'end' 'file' UnitIdentifier EOS ;
EndfileStmt = LblDef 'end' 'file' '(' PositionSpec (',' PositionSpec)* ')' EOS ;
GotoStmt = LblDef GoToKw LblRef EOS ;
GoToKw = 'go' 'to' ;
ComputedGotoStmt = LblDef GoToKw '(' LblRef (',' LblRef)* ')' ','? ScalarIntExpr EOS ;
ScalarIntExpr = Expr ;
AssignedGotoStmt = LblDef GoToKw VariableName EOS ;
AssignedGotoStmt = LblDef GoToKw VariableName ','? '(' LblRef (',' LblRef)* ')' EOS ;
IfStmt = LblDef 'if' '(' ScalarLogicalExpr ')' ActionStmt ;
ScalarLogicalExpr = Expr ;
InquireStmt = LblDef 'inquire' '(' InquireSpecList ')' EOS ;
InquireStmt = LblDef 'inquire' '(' 'iolength' '=' ScalarVariable ')' OutputItemList EOS ;
InquireSpecList = UnitIdentifier ',' InquireSpec (',' InquireSpec)* ;
InquireSpecList = InquireSpec (',' InquireSpec)* ;
InquireSpec = 'unit' '=' UnitIdentifier ;
InquireSpec = 'file' '=' CExpr ;
InquireSpec = 'iostat' '=' ScalarVariable ;
InquireSpec = 'err' '=' LblRef ;
InquireSpec = 'exist' '=' ScalarVariable ;
InquireSpec = 'opened' '=' ScalarVariable ;
InquireSpec = 'number' '=' ScalarVariable ;
InquireSpec = 'named' '=' ScalarVariable ;
InquireSpec = 'name' '=' ScalarVariable ;
InquireSpec = 'access' '=' ScalarVariable ;
InquireSpec = 'sequential' '=' ScalarVariable ;
InquireSpec = 'direct' '=' ScalarVariable ;
InquireSpec = 'form' '=' ScalarVariable ;
InquireSpec = 'formatted' '=' ScalarVariable ;
InquireSpec = 'unformatted' '=' ScalarVariable ;
InquireSpec = 'recl' '=' Expr ;
InquireSpec = 'nextrec' '=' ScalarVariable ;
InquireSpec = 'blank' '=' ScalarVariable ;
InquireSpec = 'position' '=' ScalarVariable ;
InquireSpec = 'action' '=' ScalarVariable ;
InquireSpec = 'read' '=' ScalarVariable ;
InquireSpec = 'write' '=' ScalarVariable ;
InquireSpec = 'readwrite' '=' ScalarVariable ;
InquireSpec = 'delim' '=' ScalarVariable ;
InquireSpec = 'pad' '=' ScalarVariable ;
OutputItemList = OutputItem (',' OutputItem)* ;
OutputItem = Expr ;
OutputItem = OutputImpliedDo ;
OutputImpliedDo = '(' OutputItemList ',' ImpliedDoVariable '=' Expr ',' Expr ')' ;
OutputImpliedDo = '(' OutputItemList ',' ImpliedDoVariable '=' Expr ',' Expr ',' Expr ')' ;
OpenStmt = LblDef 'open' '(' ConnectSpecList ')' EOS ;
ConnectSpecList = ConnectSpec (',' ConnectSpec)* ;
ConnectSpec = UnitIdentifier ;
ConnectSpec = 'unit' '=' UnitIdentifier ;
ConnectSpec = 'iostat' '=' ScalarVariable ;
ConnectSpec = 'err' '=' LblRef ;
ConnectSpec = 'file' '=' CExpr ;
ConnectSpec = 'status' '=' CExpr ;
ConnectSpec = 'access' '=' CExpr ;
ConnectSpec = 'form' '=' CExpr ;
ConnectSpec = 'recl' '=' Expr ;
ConnectSpec = 'blank' '=' CExpr ;
ConnectSpec = 'position' '=' CExpr ;
ConnectSpec = 'action' '=' CExpr ;
ConnectSpec = 'delim' '=' CExpr ;
ConnectSpec = 'pad' '=' CExpr ;
PauseStmt = LblDef 'pause' (Icon | Scon)? EOS ;
PrintStmt = LblDef 'print' FormatIdentifier (',' OutputItemList)? EOS ;
FormatIdentifier = LblRef ;
FormatIdentifier = CExpr ;
FormatIdentifier = '*' ;
ReadStmt = LblDef 'read' RdCtlSpec InputItemList? EOS ;
ReadStmt = LblDef 'read' RdFmtId EOS ;
ReadStmt = LblDef 'read' RdFmtId ',' InputItemList EOS ;
RdCtlSpec = RdUnitId ;
RdCtlSpec = '(' RdIoCtlSpecList ')' ;
RdUnitId = '(' UFExpr ')' ;
RdUnitId = '(' '*' ')' ;
RdIoCtlSpecList = UnitIdentifier ',' IoControlSpec ;
RdIoCtlSpecList = UnitIdentifier ',' FormatIdentifier ;
RdIoCtlSpecList = IoControlSpec ;
RdIoCtlSpecList = RdIoCtlSpecList ',' IoControlSpec ;
IoControlSpec = 'unit' '=' UnitIdentifier ;
IoControlSpec = 'fmt' '=' FormatIdentifier ;
IoControlSpec = 'nml' '=' NamelistGroupName ;
IoControlSpec = 'rec' '=' Expr ;
IoControlSpec = 'iostat' '=' ScalarVariable ;
IoControlSpec = 'err' '=' LblRef ;
IoControlSpec = 'end' '=' LblRef ;
IoControlSpec = 'advance' '=' CExpr ;
IoControlSpec = 'size' '=' Variable ;
IoControlSpec = 'eor' '=' LblRef ;
InputItemList = InputItem (',' InputItem)* ;
InputItem = Name ;
InputItem = DataRef ;
InputItem = InputImpliedDo ;
InputImpliedDo = '(' InputItemList ',' ImpliedDoVariable '=' Expr ',' Expr ')' ;
InputImpliedDo = '(' InputItemList ',' ImpliedDoVariable '=' Expr ',' Expr ',' Expr ')' ;
RdFmtId = LblRef ;
RdFmtId = '*' ;
RdFmtId = COperand ;
RdFmtId = COperand ConcatOp CPrimary ;
RdFmtId = RdFmtIdExpr ConcatOp CPrimary ;
RdFmtIdExpr = '(' UFExpr ')' ;
ReturnStmt = LblDef 'return' Expr? EOS ;
RewindStmt = LblDef 'rewind' UnitIdentifier EOS ;
RewindStmt = LblDef 'rewind' '(' PositionSpec (',' PositionSpec)* ')' EOS ;
StopStmt = LblDef 'stop' (Icon | Scon)? EOS ;
WriteStmt = LblDef 'write' '(' IoControlSpecList ')' OutputItemList? EOS ;
IoControlSpecList = UnitIdentifier ',' FormatIdentifier? ;
IoControlSpecList = UnitIdentifier ',' IoControlSpec ;
IoControlSpecList = IoControlSpec ;
IoControlSpecList = IoControlSpecList ',' IoControlSpec ;
DoConstruct = BlockDoConstruct ;
DoConstruct = LabelDoStmt ;
BlockDoConstruct = LblDef 'do' LblRef EOS ;
BlockDoConstruct = LblDef 'do' LoopControl EOS ;
BlockDoConstruct = LblDef 'do' EOS ;
BlockDoConstruct = LblDef Name ':' 'do' LblRef LoopControl EOS ;
BlockDoConstruct = LblDef Name ':' 'do' LblRef EOS ;
BlockDoConstruct = LblDef Name ':' 'do' LoopControl EOS ;
BlockDoConstruct = LblDef Name ':' 'do' EOS ;
LoopControl = 'while' '(' Expr ')' ;
LoopControl = VariableName '=' Int-Real-Dp-Expression ',' Int-Real-Dp-Expression (',' Int-Real-Dp-Expression)? ;
Int-Real-Dp-Expression = Expr ;
LabelDoStmt = LblDef 'do' LblRef ','? LoopControl EOS ;
IfConstruct = IfThenStmt ExecutionPartConstruct* (ElseIfStmt ExecutionPartConstruct*)* (ElseStmt ExecutionPartConstruct*)? EndIfStmt ;
IfThenStmt = LblDef (IfConstructName ':')? 'if' '(' ScalarLogicalExpr ')' 'then' EOS ;
IfConstructName = Ident ;
ExecutionPartConstruct = ExecutableConstruct ;
ExecutionPartConstruct = FormatStmt ;
ExecutionPartConstruct = DataStmt ;
ExecutionPartConstruct = EntryStmt ;
ElseIfStmt = LblDef 'else' 'if' '(' ScalarLogicalExpr ')' 'then' IfConstructName? EOS ;
ElseStmt = LblDef 'else' IfConstructName? EOS ;
EndIfStmt = LblDef 'end' 'if' IfConstructName? EOS ;
CaseConstruct = LblDef Name ':' 'select' 'case' '(' Expr ')' EOS SelectCaseRange ;
CaseConstruct = LblDef 'select' 'case' '(' Expr ')' EOS SelectCaseRange ;
SelectCaseRange = SelectCaseBody EndSelectStmt ;
SelectCaseRange = EndSelectStmt ;
SelectCaseBody = CaseBodyConstruct+ ;
CaseBodyConstruct = CaseStmt ;
CaseBodyConstruct = ExecutionPartConstruct ;
CaseStmt = LblDef 'case' CaseSelector Name? EOS ;
CaseSelector = '(' CaseValueRange (',' CaseValueRange)* ')' ;
CaseSelector = 'default' ;
CaseValueRange = Expr ;
CaseValueRange = Expr ':' ;
CaseValueRange = ':' Expr ;
CaseValueRange = Expr ':' Expr ;
EndSelectStmt = LblDef 'end' 'select' EndName? EOS ;
WhereConstruct = WhereConstructStmt AssignmentStmt* (ElsewhereStmt AssignmentStmt*)? EndWhereStmt ;
WhereConstructStmt = LblDef 'where' '(' MaskExpr ')' EOS ;
ElsewhereStmt = LblDef 'elsewhere' EOS ;
EndWhereStmt = LblDef 'end' 'where' EOS ;
EndDoStmt = LblDef 'end' 'do' Name? EOS ;
EndProgramStmt = LblDef 'end' EOS ;
EndProgramStmt = LblDef 'end' 'program' EndName? EOS ;
InternalSubProgPart = Body ContainsStmt InternalSubprogram ;
InternalSubProgPart = ContainsStmt InternalSubprogram ;
InternalSubProgPart = InternalSubProgPart InternalSubprogram ;
Body = BodyConstruct+ ;
ContainsStmt = LblDef 'contains' EOS ;
InternalSubprogram = FunctionSubprogram ;
InternalSubprogram = SubroutineSubprogram ;
FunctionSubprogram = LblDef FunctionPrefix FunctionName FunctionRange ;
FunctionRange = FunctionParList EOS Body? EndFunctionStmt ;
FunctionRange = FunctionParList 'result' '(' Name ')' EOS InternalSubProgPart EndFunctionStmt ;
FunctionRange = FunctionParList 'result' '(' Name ')' EOS Body EndFunctionStmt ;
FunctionRange = FunctionParList 'result' '(' Name ')' EOS EndFunctionStmt ;
FunctionRange = FunctionParList EOS InternalSubProgPart EndFunctionStmt ;
SubroutineSubprogram = LblDef 'recursive'? 'subroutine' SubroutineName SubroutineRange ;
SubroutineRange = SubroutineParList? EOS Body? EndSubroutineStmt ;
SubroutineRange = SubroutineParList EOS InternalSubProgPart EndSubroutineStmt ;
Module = ModuleStmt ModuleBody EndModuleStmt ;
Module = ModuleStmt EndModuleStmt ;
ModuleStmt = LblDef 'module' ModuleName EOS ;
ModuleName = Ident ;
ModuleBody = SpecificationPartConstruct ;
ModuleBody = ModuleSubprogramPartConstruct ;
ModuleBody = ModuleBody SpecificationPartConstruct ;
ModuleBody = ModuleBody ModuleSubprogramPartConstruct ;
ModuleSubprogramPartConstruct = ContainsStmt ;
ModuleSubprogramPartConstruct = ModuleSubprogram ;
ModuleSubprogram = FunctionSubprogram ;
ModuleSubprogram = SubroutineSubprogram ;
EndModuleStmt = LblDef 'end' EOS ;
EndModuleStmt = LblDef 'end' 'module' EndName? EOS ;
BlockDataSubprogram = BlockDataStmt BlockDataBody EndBlockDataStmt ;
BlockDataSubprogram = BlockDataStmt EndBlockDataStmt ;
BlockDataStmt = LblDef 'block' 'data' BlockDataName? EOS ;
BlockDataName = Ident ;
BlockDataBody = BlockDataBodyConstruct+ ;
BlockDataBodyConstruct = SpecificationPartConstruct ;
EndBlockDataStmt = LblDef 'end' 'block' 'data' EndName? EOS ;
EndBlockDataStmt = LblDef 'end' EOS ;
