module Main

exports
  sorts
        LocationPath AbsoluteLocationPath RelativeLocationPath Step AxisSpecifier AxisName NodeTest Predicate PredicateExpr AbbreviatedAbsoluteLocationPath AbbreviatedRelativeLocationPath AbbreviatedStep AbbreviatedAxisSpecifier Expr PrimaryExpr FunctionCall Argument UnionExpr PathExpr FilterExpr OrExpr AndExpr EqualityExpr RelationalExpr AdditiveExpr MultiplicativeExpr UnaryExpr ExprToken Number Operator OperatorName MultiplyOperator VariableReference NameTest NodeType ExprWhitespace Digits 
  context-free syntax
        RelativeLocationPath
		| AbsoluteLocationPath -> LocationPath {cons(NT-LocationPath)}

        "/" RelativeLocationPath?
		| AbbreviatedAbsoluteLocationPath -> AbsoluteLocationPath {cons(NT-AbsoluteLocationPath)}

        Step
		| RelativeLocationPath "/" Step
		| AbbreviatedRelativeLocationPath -> RelativeLocationPath {cons(NT-RelativeLocationPath)}

        AxisSpecifier NodeTest Predicate*
		| AbbreviatedStep -> Step {cons(NT-Step)}

        AxisName "::"
		| AbbreviatedAxisSpecifier -> AxisSpecifier {cons(NT-AxisSpecifier)}

        "ancestor"
		| "ancestor-or-self"
		| "attribute"
		| "child"
		| "descendant"
		| "descendant-or-self"
		| "following"
		| "following-sibling"
		| "namespace"
		| "parent"
		| "preceding"
		| "preceding-sibling"
		| "self" -> AxisName {cons(NT-AxisName)}

        NameTest
		| NodeType "(" ")"
		| "processing-instruction" "(" Literal ")" -> NodeTest {cons(NT-NodeTest)}

        "[" PredicateExpr "]" -> Predicate {cons(NT-Predicate)}

        Expr -> PredicateExpr {cons(NT-PredicateExpr)}

        "//" RelativeLocationPath -> AbbreviatedAbsoluteLocationPath {cons(NT-AbbreviatedAbsoluteLocationPath)}

        RelativeLocationPath "//" Step -> AbbreviatedRelativeLocationPath {cons(NT-AbbreviatedRelativeLocationPath)}

        "."
		| ".." -> AbbreviatedStep {cons(NT-AbbreviatedStep)}

        "@"? -> AbbreviatedAxisSpecifier {cons(NT-AbbreviatedAxisSpecifier)}

        OrExpr -> Expr {cons(NT-Expr)}

        VariableReference
		| "(" Expr ")"
		| Literal
		| Number
		| FunctionCall -> PrimaryExpr {cons(NT-PrimaryExpr)}

        FunctionName "(" (Argument ("," Argument)*)? ")" -> FunctionCall {cons(NT-FunctionCall)}

        Expr -> Argument {cons(NT-Argument)}

        PathExpr
		| UnionExpr "|" PathExpr -> UnionExpr {cons(NT-UnionExpr)}

        LocationPath
		| FilterExpr
		| FilterExpr "/" RelativeLocationPath
		| FilterExpr "//" RelativeLocationPath -> PathExpr {cons(NT-PathExpr)}

        PrimaryExpr
		| FilterExpr Predicate -> FilterExpr {cons(NT-FilterExpr)}

        AndExpr
		| OrExpr "or" AndExpr -> OrExpr {cons(NT-OrExpr)}

        EqualityExpr
		| AndExpr "and" EqualityExpr -> AndExpr {cons(NT-AndExpr)}

        RelationalExpr
		| EqualityExpr "=" RelationalExpr
		| EqualityExpr "!=" RelationalExpr -> EqualityExpr {cons(NT-EqualityExpr)}

        AdditiveExpr
		| RelationalExpr "<" AdditiveExpr
		| RelationalExpr ">" AdditiveExpr
		| RelationalExpr "<=" AdditiveExpr
		| RelationalExpr ">=" AdditiveExpr -> RelationalExpr {cons(NT-RelationalExpr)}

        MultiplicativeExpr
		| AdditiveExpr "+" MultiplicativeExpr
		| AdditiveExpr "-" MultiplicativeExpr -> AdditiveExpr {cons(NT-AdditiveExpr)}

        UnaryExpr
		| MultiplicativeExpr MultiplyOperator UnaryExpr
		| MultiplicativeExpr "div" UnaryExpr
		| MultiplicativeExpr "mod" UnaryExpr -> MultiplicativeExpr {cons(NT-MultiplicativeExpr)}

        UnionExpr
		| "-" UnaryExpr -> UnaryExpr {cons(NT-UnaryExpr)}

        "("
		| ")"
		| "["
		| "]"
		| "."
		| ".."
		| "@"
		| ","
		| "::"
		| NameTest
		| NodeType
		| Operator
		| FunctionName
		| AxisName
		| Literal
		| Number
		| VariableReference -> ExprToken {cons(NT-ExprToken)}

        Digits ("." Digits?)?
		| "." Digits -> Number {cons(NT-Number)}

        OperatorName
		| MultiplyOperator
		| "/"
		| "//"
		| "|"
		| "+"
		| "-"
		| "="
		| "!="
		| "<"
		| "<="
		| ">"
		| ">=" -> Operator {cons(NT-Operator)}

        "and"
		| "or"
		| "mod"
		| "div" -> OperatorName {cons(NT-OperatorName)}

        "*" -> MultiplyOperator {cons(NT-MultiplyOperator)}

        "$" QName -> VariableReference {cons(NT-VariableReference)}

        "*"
		| NCName ":" "*"
		| QName -> NameTest {cons(NT-NameTest)}

        "comment"
		| "text"
		| "processing-instruction"
		| "node" -> NodeType {cons(NT-NodeType)}

        S -> ExprWhitespace {cons(NT-ExprWhitespace)}

        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ -> Digits {cons(NT-Digits)}
