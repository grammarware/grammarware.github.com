[NT-LocationPath] LocationPath:
        RelativeLocationPath
        AbsoluteLocationPath
[NT-AbsoluteLocationPath] AbsoluteLocationPath:
        "/" RelativeLocationPath?
        AbbreviatedAbsoluteLocationPath
[NT-RelativeLocationPath] RelativeLocationPath:
        Step
        RelativeLocationPath "/" Step
        AbbreviatedRelativeLocationPath
[NT-Step] Step:
        AxisSpecifier NodeTest Predicate*
        AbbreviatedStep
[NT-AxisSpecifier] AxisSpecifier:
        AxisName "::"
        AbbreviatedAxisSpecifier
[NT-AxisName] AxisName:
        "ancestor"
        "ancestor-or-self"
        "attribute"
        "child"
        "descendant"
        "descendant-or-self"
        "following"
        "following-sibling"
        "namespace"
        "parent"
        "preceding"
        "preceding-sibling"
        "self"
[NT-NodeTest] NodeTest:
        NameTest
        NodeType "(" ")"
        "processing-instruction" "(" Literal ")"
[NT-Predicate] Predicate:
        "[" PredicateExpr "]"
[NT-PredicateExpr] PredicateExpr:
        Expr
[NT-AbbreviatedAbsoluteLocationPath] AbbreviatedAbsoluteLocationPath:
        "//" RelativeLocationPath
[NT-AbbreviatedRelativeLocationPath] AbbreviatedRelativeLocationPath:
        RelativeLocationPath "//" Step
[NT-AbbreviatedStep] AbbreviatedStep:
        "."
        ".."
[NT-AbbreviatedAxisSpecifier] AbbreviatedAxisSpecifier:
        "@"?
[NT-Expr] Expr:
        OrExpr
[NT-PrimaryExpr] PrimaryExpr:
        VariableReference
        "(" Expr ")"
        Literal
        Number
        FunctionCall
[NT-FunctionCall] FunctionCall:
        FunctionName "(" (Argument ("," Argument)*)? ")"
[NT-Argument] Argument:
        Expr
[NT-UnionExpr] UnionExpr:
        PathExpr
        UnionExpr "|" PathExpr
[NT-PathExpr] PathExpr:
        LocationPath
        FilterExpr
        FilterExpr "/" RelativeLocationPath
        FilterExpr "//" RelativeLocationPath
[NT-FilterExpr] FilterExpr:
        PrimaryExpr
        FilterExpr Predicate
[NT-OrExpr] OrExpr:
        AndExpr
        OrExpr "or" AndExpr
[NT-AndExpr] AndExpr:
        EqualityExpr
        AndExpr "and" EqualityExpr
[NT-EqualityExpr] EqualityExpr:
        RelationalExpr
        EqualityExpr "=" RelationalExpr
        EqualityExpr "!=" RelationalExpr
[NT-RelationalExpr] RelationalExpr:
        AdditiveExpr
        RelationalExpr "<" AdditiveExpr
        RelationalExpr ">" AdditiveExpr
        RelationalExpr "<=" AdditiveExpr
        RelationalExpr ">=" AdditiveExpr
[NT-AdditiveExpr] AdditiveExpr:
        MultiplicativeExpr
        AdditiveExpr "+" MultiplicativeExpr
        AdditiveExpr "-" MultiplicativeExpr
[NT-MultiplicativeExpr] MultiplicativeExpr:
        UnaryExpr
        MultiplicativeExpr MultiplyOperator UnaryExpr
        MultiplicativeExpr "div" UnaryExpr
        MultiplicativeExpr "mod" UnaryExpr
[NT-UnaryExpr] UnaryExpr:
        UnionExpr
        "-" UnaryExpr
[NT-ExprToken] ExprToken:
        "("
        ")"
        "["
        "]"
        "."
        ".."
        "@"
        ","
        "::"
        NameTest
        NodeType
        Operator
        FunctionName
        AxisName
        Literal
        Number
        VariableReference
[NT-Number] Number:
        Digits ("." Digits?)?
        "." Digits
[NT-Operator] Operator:
        OperatorName
        MultiplyOperator
        "/"
        "//"
        "|"
        "+"
        "-"
        "="
        "!="
        "<"
        "<="
        ">"
        ">="
[NT-OperatorName] OperatorName:
        "and"
        "or"
        "mod"
        "div"
[NT-MultiplyOperator] MultiplyOperator:
        "*"
[NT-VariableReference] VariableReference:
        "$" QName
[NT-NameTest] NameTest:
        "*"
        NCName ":" "*"
        QName
[NT-NodeType] NodeType:
        "comment"
        "text"
        "processing-instruction"
        "node"
[NT-ExprWhitespace] ExprWhitespace:
        S
[NT-Digits] Digits:
        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+
