LocationPath = RelativeLocationPath ;
LocationPath = AbsoluteLocationPath ;
AbsoluteLocationPath = '/' RelativeLocationPath? ;
AbsoluteLocationPath = AbbreviatedAbsoluteLocationPath ;
RelativeLocationPath = Step ;
RelativeLocationPath = RelativeLocationPath '/' Step ;
RelativeLocationPath = AbbreviatedRelativeLocationPath ;
Step = AxisSpecifier NodeTest Predicate* ;
Step = AbbreviatedStep ;
AxisSpecifier = AxisName '::' ;
AxisSpecifier = AbbreviatedAxisSpecifier ;
AxisName = 'ancestor' ;
AxisName = 'ancestor-or-self' ;
AxisName = 'attribute' ;
AxisName = 'child' ;
AxisName = 'descendant' ;
AxisName = 'descendant-or-self' ;
AxisName = 'following' ;
AxisName = 'following-sibling' ;
AxisName = 'namespace' ;
AxisName = 'parent' ;
AxisName = 'preceding' ;
AxisName = 'preceding-sibling' ;
AxisName = 'self' ;
NodeTest = NameTest ;
NodeTest = NodeType '(' ')' ;
NodeTest = 'processing-instruction' '(' Literal ')' ;
Predicate = '[' PredicateExpr ']' ;
PredicateExpr = Expr ;
AbbreviatedAbsoluteLocationPath = '//' RelativeLocationPath ;
AbbreviatedRelativeLocationPath = RelativeLocationPath '//' Step ;
AbbreviatedStep = '.' ;
AbbreviatedStep = '..' ;
AbbreviatedAxisSpecifier = '@'? ;
Expr = OrExpr ;
PrimaryExpr = VariableReference ;
PrimaryExpr = '(' Expr ')' ;
PrimaryExpr = Literal ;
PrimaryExpr = Number ;
PrimaryExpr = FunctionCall ;
FunctionCall = FunctionName '(' (Argument (',' Argument)*)? ')' ;
Argument = Expr ;
UnionExpr = PathExpr ;
UnionExpr = UnionExpr '|' PathExpr ;
PathExpr = LocationPath ;
PathExpr = FilterExpr ;
PathExpr = FilterExpr '/' RelativeLocationPath ;
PathExpr = FilterExpr '//' RelativeLocationPath ;
FilterExpr = PrimaryExpr ;
FilterExpr = FilterExpr Predicate ;
OrExpr = AndExpr ;
OrExpr = OrExpr 'or' AndExpr ;
AndExpr = EqualityExpr ;
AndExpr = AndExpr 'and' EqualityExpr ;
EqualityExpr = RelationalExpr ;
EqualityExpr = EqualityExpr '=' RelationalExpr ;
EqualityExpr = EqualityExpr '!=' RelationalExpr ;
RelationalExpr = AdditiveExpr ;
RelationalExpr = RelationalExpr '<' AdditiveExpr ;
RelationalExpr = RelationalExpr '>' AdditiveExpr ;
RelationalExpr = RelationalExpr '<=' AdditiveExpr ;
RelationalExpr = RelationalExpr '>=' AdditiveExpr ;
AdditiveExpr = MultiplicativeExpr ;
AdditiveExpr = AdditiveExpr '+' MultiplicativeExpr ;
AdditiveExpr = AdditiveExpr '-' MultiplicativeExpr ;
MultiplicativeExpr = UnaryExpr ;
MultiplicativeExpr = MultiplicativeExpr MultiplyOperator UnaryExpr ;
MultiplicativeExpr = MultiplicativeExpr 'div' UnaryExpr ;
MultiplicativeExpr = MultiplicativeExpr 'mod' UnaryExpr ;
UnaryExpr = UnionExpr ;
UnaryExpr = '-' UnaryExpr ;
ExprToken = '(' ;
ExprToken = ')' ;
ExprToken = '[' ;
ExprToken = ']' ;
ExprToken = '.' ;
ExprToken = '..' ;
ExprToken = '@' ;
ExprToken = ',' ;
ExprToken = '::' ;
ExprToken = NameTest ;
ExprToken = NodeType ;
ExprToken = Operator ;
ExprToken = FunctionName ;
ExprToken = AxisName ;
ExprToken = Literal ;
ExprToken = Number ;
ExprToken = VariableReference ;
Number = Digits ('.' Digits?)? ;
Number = '.' Digits ;
Operator = OperatorName ;
Operator = MultiplyOperator ;
Operator = '/' ;
Operator = '//' ;
Operator = '|' ;
Operator = '+' ;
Operator = '-' ;
Operator = '=' ;
Operator = '!=' ;
Operator = '<' ;
Operator = '<=' ;
Operator = '>' ;
Operator = '>=' ;
OperatorName = 'and' ;
OperatorName = 'or' ;
OperatorName = 'mod' ;
OperatorName = 'div' ;
MultiplyOperator = '*' ;
VariableReference = '$' QName ;
NameTest = '*' ;
NameTest = NCName ':' '*' ;
NameTest = QName ;
NodeType = 'comment' ;
NodeType = 'text' ;
NodeType = 'processing-instruction' ;
NodeType = 'node' ;
ExprWhitespace = S ;
Digits = ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+ ;
