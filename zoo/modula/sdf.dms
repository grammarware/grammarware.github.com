Compilation = 'UNSAFE'? (Interface | Module | GenInf | GenMod) ;
Interface = 'INTERFACE' Id ';' Import* Decl* 'END' Id '.' ;
Interface = 'INTERFACE' Id '=' Id GenActls 'END' Id '.' ;
Id = 'NOT' ;
Id = 'ROOT' ;
Import = AsImport ;
Import = FromImport ;
AsImport = 'IMPORT' ImportItem (',' ImportItem)* ';' ;
ImportItem = Id ;
ImportItem = Id 'AS' Id ;
FromImport = 'FROM' Id 'IMPORT' IdList ';' ;
IdList = Id (',' Id)* ;
Decl = 'CONST' (ConstDecl ';')* ;
Decl = 'TYPE' (TypeDecl ';')* ;
Decl = 'EXCEPTION' (ExceptionDecl ';')* ;
Decl = 'VAR' (VariableDecl ';')* ;
Decl = ProcedureHead ('=' Block Id)? ';' ;
Decl = 'REVEAL' (QualId ('=' | '<:') Type ';')* ;
ConstDecl = Id (':' Type)? '=' Expr ;
Type = TypeLiteral ;
Type = QualId ;
TypeLiteral = ArrayType ;
TypeLiteral = PackedType ;
TypeLiteral = EnumType ;
TypeLiteral = ObjectType ;
TypeLiteral = ProcedureType ;
TypeLiteral = RecordType ;
TypeLiteral = RefType ;
TypeLiteral = SetType ;
TypeLiteral = SubrangeType ;
TypeLiteral = '(' Type ')' ;
TypeLiteral = TypeName ;
ArrayType = 'ARRAY' (Type (',' Type)*)? 'OF' Type ;
PackedType = 'BITS' Expr 'FOR' Type ;
Expr = Expr 'OR' Expr ;
Expr = Expr 'AND' Expr ;
Expr = 'NOT' Expr ;
Expr = Expr Relop Expr ;
Expr = Expr Addop Expr ;
Expr = Expr Mulop Expr ;
Expr = '+' Expr ;
Expr = '-' Expr ;
Expr = Expr Selector ;
Expr = Id ;
Expr = Literal ;
Expr = Constructor ;
Expr = '(' Expr ')' ;
Relop = '=' ;
Relop = '#' ;
Relop = '<' ;
Relop = '<=' ;
Relop = '>' ;
Relop = '>=' ;
Relop = 'IN' ;
Addop = '+' ;
Addop = '-' ;
Addop = '&' ;
Mulop = '*' ;
Mulop = '/' ;
Mulop = 'DIV' ;
Mulop = 'MOD' ;
Selector = '^' ;
Selector = '.' Id ;
Selector = '[' Expr (',' Expr)* ']' ;
Selector = '(' (Actual (',' Actual)*)? ')' ;
Actual = TypeLiteral ;
Actual = (Id ':=')? Expr ;
Constructor = Type '{' AnyCons? '}' ;
AnyCons = Elt (',' Elt)* (',' '..')? ;
Elt = Expr '..' Expr ;
Elt = Expr ;
Elt = Id ':=' Expr ;
EnumType = '{' IdList? '}' ;
ObjectType = Ancestor? Brand? 'OBJECT' Fields ('METHODS' Methods)? ('OVERRIDES' Overrides)? 'END' ;
Ancestor = TypeName ;
Ancestor = ObjectType ;
Ancestor = QualId ;
TypeName = 'ROOT' ;
TypeName = 'UNTRACED' 'ROOT' ;
QualId = Id ('.' Id)? ;
Brand = 'BRANDED' TextLiteral? ;
Fields = (Field (';' Field)* ';'?)? ;
Field = IdList ':' Type ':=' Expr ;
Field = IdList ':' Type ;
Field = IdList ':=' Expr ;
Methods = (Method (';' Method)* ';'?)? ;
Method = Id Signature (':=' Expr)? ;
Signature = '(' Formals ')' (':' Type)? ('RAISES' Raises)? ;
Formals = (Formal (';' Formal)* ';'?)? ;
Formal = Mode? IdList ':' Type ':=' Expr ;
Formal = Mode? IdList ':' Type ;
Formal = Mode? IdList ':=' Expr ;
Mode = 'VALUE' ;
Mode = 'VAR' ;
Mode = 'READONLY' ;
Raises = '{' (QualId (',' QualId)*)? '}' ;
Raises = 'ANY' ;
Overrides = (Override (';' Override)* ';'?)? ;
Override = Id ':=' Expr ;
ProcedureType = 'PROCEDURE' Signature ;
RecordType = 'RECORD' Fields 'END' ;
RefType = 'UNTRACED'? Brand? 'REF' Type ;
SetType = 'SET' 'OF' Type ;
SubrangeType = '[' Expr '..' Expr ']' ;
TypeDecl = Id ('=' | '<:') Type ;
ExceptionDecl = Id ('(' Type ')')? ;
VariableDecl = IdList ':' Type ':=' Expr ;
VariableDecl = IdList ':' Type ;
VariableDecl = IdList ':=' Expr ;
ProcedureHead = 'PROCEDURE' Id Signature ;
Block = Decl* 'BEGIN' Stmts 'END' ;
Stmts = (Stmt (';' Stmt)* ';'?)? ;
Stmt = AssignStmt ;
Stmt = Block ;
Stmt = CallStmt ;
Stmt = CaseStmt ;
Stmt = ExitStmt ;
Stmt = EvalStmt ;
Stmt = ForStmt ;
Stmt = IfStmt ;
Stmt = LockStmt ;
Stmt = LoopStmt ;
Stmt = RaiseStmt ;
Stmt = RepeatStmt ;
Stmt = ReturnStmt ;
Stmt = TryFinStmt ;
Stmt = TryXptStmt ;
Stmt = TCaseStmt ;
Stmt = WhileStmt ;
Stmt = WithStmt ;
AssignStmt = Expr ':=' Expr ;
CallStmt = Expr '(' (Actual (',' Actual)*)? ')' ;
CaseStmt = 'CASE' Expr 'OF' '|'? Case ('|' Case)* ('ELSE' Stmts)? 'END' ;
Case = Label (',' Label)* '=>' Stmts ;
Label = Expr ('..' Expr)? ;
ExitStmt = 'EXIT' ;
EvalStmt = 'EVAL' Expr ;
ForStmt = 'FOR' Id ':=' Expr 'TO' Expr ('BY' Expr)? 'DO' Stmts 'END' ;
IfStmt = 'IF' Expr 'THEN' Stmts ('ELSIF' Expr 'THEN' Stmts)* ('ELSE' Stmts)? 'END' ;
LockStmt = 'LOCK' Expr 'DO' Stmts 'END' ;
LoopStmt = 'LOOP' Stmts 'END' ;
RaiseStmt = 'RAISE' QualId ('(' Expr ')')? ;
RepeatStmt = 'REPEAT' Stmts 'UNTIL' Expr ;
ReturnStmt = 'RETURN' Expr? ;
TryFinStmt = 'TRY' Stmts 'FINALLY' Stmts 'END' ;
TryXptStmt = 'TRY' Stmts 'EXCEPT' '|'? Handler ('|' Handler)* ('ELSE' Stmts)? 'END' ;
Handler = QualId (',' QualId)* ('(' Id ')')? '=>' Stmts ;
TCaseStmt = 'TYPECASE' Expr 'OF' '|'? TCase ('|' TCase)* ('ELSE' Stmts)? 'END' ;
TCase = Type (',' Type)* ('(' Id ')')? '=>' Stmts ;
WhileStmt = 'WHILE' Expr 'DO' Stmts 'END' ;
WithStmt = 'WITH' Binding (',' Binding)* 'DO' Stmts 'END' ;
Binding = Id '=' Expr ;
GenActls = '(' IdList? ')' ;
Module = 'MODULE' Id ('EXPORTS' IdList)? ';' Import* Block Id '.' ;
Module = 'MODULE' Id ('EXPORTS' IdList)? '=' Id GenActls 'END' Id '.' ;
GenInf = 'GENERIC' 'INTERFACE' Id GenFmls ';' Import* Decl* 'END' Id '.' ;
GenFmls = '(' IdList? ')' ;
GenMod = 'GENERIC' 'MODULE' Id GenFmls ';' Import* Block Id '.' ;
