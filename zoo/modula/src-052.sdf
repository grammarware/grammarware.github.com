module Main

exports
  sorts
        Compilation Interface Module Import Block Declaration ConstDecl TypeDecl ExceptionDecl VariableDecl ProcedureHead Signature Formals Formal Raises Stmts Stmt AssignStmt CallStmt CaseStmt ExitStmt EvalStmt ForStmt IfStmt LockStmt LoopStmt RaiseStmt Repeatstmt ReturnStmt TCaseStmt TryXptStmt TryFinStmt WhileStmt WithStmt Case Labels Handler Tcase Binding Actual Type ArrayType PackedType EnumType ObjectType ProcedureType RecordType RefType SetType SubrangeType Ancestor Brand Fields Field Methods Method ConstExpr Expr E1 E2 E3 E4 E5 E6 E7 E8 Relop Addop Mulop Selector Constructor SetCons SetElt RecordCons RecordElt ArrayCons TypeName ExceptionID ProcedureID IDList Literal Ident Operator CharLiteral TextLiteral Escape Number Exponent PrintingChar HexDigit Digit OctalDigit Letter OtherChar ExtendedChar 
  context-free syntax
        "UNSAFE"? (Interface | Module) -> Compilation

        "INTERFACE" Ident ";" Import* Declaration* "END" Ident "." -> Interface

        "MODULE" Ident ("EXPORTS" IDList)? ";" Import* Block Ident "." -> Module

        ("FROM" Ident)? "IMPORT" IDList ";" -> Import

        Declaration* "BEGIN" Stmts "END" -> Block

        "CONST" (ConstDecl ";")*
		| "TYPE" (TypeDecl ";")*
		| "EXCEPTION" (ExceptionDecl ";")*
		| "VAR" (VariableDecl ";")*
		| ProcedureHead ("=" Block Ident)? ";"
		| "REVEAL" (TypeID ("=" | "<:") Type ";")* -> Declaration

        Ident (":" Type)? "=" ConstExpr -> ConstDecl

        Ident ("=" | "<:") Type -> TypeDecl

        Ident ("(" Type ")")? -> ExceptionDecl

        IDList ":" Type "&" ":=" Expr -> VariableDecl

        "PROCEDURE" Ident Signature -> ProcedureHead

        "(" Formals ")" (":" Type)? ("RAISES" Raises)? -> Signature

        (Formal (";" Formal)* ";"?)? -> Formals

        ("VALUE" | "VAR" | "READONLY")? IDList ":" Type "&" ":=" ConstExpr -> Formal

        "{" (ExceptionID ("," ExceptionID)*)? "}" -> Raises

        (Stmt (";" Stmt)* ";"?)? -> Stmts

        AssignStmt
		| Block
		| CallStmt
		| CaseStmt
		| ExitStmt
		| EvalStmt
		| ForStmt
		| IfStmt
		| LockStmt
		| LoopStmt
		| RaiseStmt
		| RepeatStmt
		| ReturnStmt
		| TryFinStmt
		| TryXptStmt
		| TCaseStmt
		| WhileStmt
		| WithStmt -> Stmt

        Expr ":=" Expr -> AssignStmt

        Expr "(" (Actual ("," Actual)*)? ")" -> CallStmt

        "CASE" Expr "OF" Case? ("|" Case)* ("ELSE" Stmts)? "END" -> CaseStmt

        "EXIT" -> ExitStmt

        "EVAL" Expr -> EvalStmt

        "FOR" Ident ":=" Expt "TO" Expr ("BY" Expr)? "DO" Stmts "END" -> ForStmt

        "IF" Expr "THEN" Stmts ("ELSIF" Expt "THEN" Stmts)* ("ELSE" Stmts)? "END" -> IfStmt

        "LOCK" Expr "DO" Stmts "END" -> LockStmt

        "LOOP" Stmts "END" -> LoopStmt

        "RAISE" ExceptionID ("(" Expr ")")? -> RaiseStmt

        "REPEAT" Stmts "UNTIL" Expr -> Repeatstmt

        "RETURN" Expr? -> ReturnStmt

        "TYPECASE" Expr "OF" Tcase? ("|" Tcase)* ("ELSE" Stmts)? "END" -> TCaseStmt

        "TRY" Stmts "EXCEPT" Handler? ("|" Handler)* ("ELSE" Stmts)? "END" -> TryXptStmt

        "TRY" Stmts "FINALLY" Stmts "END" -> TryFinStmt

        "WHILE" Expt "DO" Stmts "END" -> WhileStmt

        "WITH" Binding ("," Binding)* "DO" Stmts "END" -> WithStmt

        Labels ("," Labels)* "=>" Stmts -> Case

        ConstExpr (".." ConstExpr)? -> Labels

        ExceptionID ("," ExceptionID)* ("(" Ident ")")? "=>" Stmts -> Handler

        Type ("," Type)* ("(" Ident ")")? "=>" Stmts -> Tcase

        Ident "=" Expr -> Binding

        (Ident ":=")? Expr
		| Type -> Actual

        TypeName
		| ArrayType
		| PackedType
		| EnumType
		| ObjectType
		| ProcedureType
		| RecordType
		| RefType
		| SetType
		| SubrangeType
		| "(" Type ")" -> Type

        "ARRAY" (Type ("," Type)*)? "OF" Type -> ArrayType

        "BITS" ConstExpr "FOR" Type -> PackedType

        "{" IDList? "}" -> EnumType

        Ancestor? Brand? "OBJECT" Fields ("METHODS" Methods)? "END" -> ObjectType

        "PROCEDURE" Signature -> ProcedureType

        "RECORD" Fields "END" -> RecordType

        "UNTRACED"? Brand? "REF" Type -> RefType

        "SET" "OF" Type -> SetType

        "[" ConstExpr ".." ConstExpr "]" -> SubrangeType

        TypeName
		| ObjectType
		| "UNTRACED" -> Ancestor

        "BRANDED" TextLiteral? -> Brand

        (Field (";" Field)* ";"?)? -> Fields

        IDList ":" Type "&" ":=" ConstExpr -> Field

        (Method (";" Method)* ";"?)? -> Methods

        Ident Signature "&" ":=" ProcedureID -> Method

        Expr -> ConstExpr

        E1 ("OR" E1)* -> Expr

        E2 ("AND" E2)* -> E1

        "NOT"* E3 -> E2

        E4 (Relop E4)* -> E3

        E5 (Addop E5)* -> E4

        E6 (Mulop E6)* -> E5

        ("+" | "-")* E7 -> E6

        E8 Selector* -> E7

        Ident
		| Number
		| CharLiteral
		| TextLiteral
		| Constructor
		| "(" Expr ")" -> E8

        "="
		| "#"
		| "<"
		| "<="
		| ">"
		| ">="
		| "IN" -> Relop

        "+"
		| "-"
		| "&" -> Addop

        "*"
		| "/"
		| "DIV"
		| "MOD" -> Mulop

        "^"
		| "." Ident
		| "[" Expr ("," Expr)* "]"
		| "(" (Actual ("," Actual)*)? ")" -> Selector

        Type "{" (SetCons | RecordCons | ArrayCons)? "}" -> Constructor

        SetElt ("." SetElt)* -> SetCons

        Expr (".." Expr)? -> SetElt

        RecordElt ("," RecordElt)* -> RecordCons

        (Ident ":=")? Expr -> RecordElt

        Expr ("," Expr)* ("," "..")? -> ArrayCons

        Ident ("." Ident)?
		| "ROOT"
		| "UNTRACED" "ROOT" -> TypeName

        Ident ("." Ident)? -> ExceptionID

        Ident ("." Ident)? -> ProcedureID

        Ident ("," Ident)* -> IDList

        Number
		| CharLiteral
		| TextLiteral -> Literal

        Letter (Letter | Digit | "_")* -> Ident

        "+"
		| "-"
		| "*"
		| "/"
		| "."
		| "^"
		| ":" "="
		| "="
		| "$"
		| "<"
		| "<" "="
		| ">" "="
		| ">"
		| "&"
		| "<" ":"
		| "=" ">"
		| ","
		| ";"
		| "|"
		| ":"
		| "." "."
		| "("
		| ")"
		| "{"
		| "}"
		| "["
		| "]" -> Operator

        "’" (PrintingChar | Escape) "’" -> CharLiteral

        """ (PrintingChar | Escape)* """ -> TextLiteral

        "\" "n"
		| "\" "t"
		| "\" "r"
		| "\" "f"
		| "\" "\"
		| "\" "’"
		| "\" """
		| "\" OctalDigit OctalDigit OctalDigit -> Escape

        Digit+
		| Digit+ "_" HexDigit+
		| Digit+ "." Digit+ Exponent? -> Number

        ("E" | "e" | "D" | "d") ("+" | "-")? Digit+ -> Exponent

        Letter
		| Digit
		| UtherChar -> PrintingChar

        Digit
		| "A"
		| "B"
		| "C"
		| "D"
		| "E"
		| "F"
		| "a"
		| "b"
		| "c"
		| "d"
		| "e"
		| "f" -> HexDigit

        "0"
		| "1"
		| "2"
		| "3"
		| "4"
		| "5"
		| "6"
		| "7"
		| "8"
		| "9" -> Digit

        "0"
		| "1"
		| "2"
		| "3"
		| "4"
		| "5"
		| "6"
		| "7" -> OctalDigit

        "A"
		| "B"
		| "C"
		| "D"
		| "E"
		| "F"
		| "G"
		| "H"
		| "I"
		| "J"
		| "K"
		| "L"
		| "M"
		| "N"
		| "O"
		| "P"
		| "Q"
		| "R"
		| "S"
		| "T"
		| "U"
		| "V"
		| "W"
		| "X"
		| "Y"
		| "Z"
		| "a"
		| "b"
		| "c"
		| "d"
		| "e"
		| "f"
		| "g"
		| "h"
		| "i"
		| "j"
		| "k"
		| "l"
		| "m"
		| "n"
		| "o"
		| "p"
		| "q"
		| "r"
		| "s"
		| "t"
		| "u"
		| "v"
		| "w"
		| "x"
		| "y"
		| "z" -> Letter

        " "
		| "!"
		| "#"
		| "$"
		| "%"
		| "&"
		| "("
		| ")"
		| "*"
		| "+"
		| ","
		| "-"
		| "."
		| "/"
		| ":"
		| ";"
		| "<"
		| "="
		| ">"
		| "?"
		| "@"
		| "["
		| "]"
		| "^"
		| "_"
		| "‘"
		| "{"
		| "|"
		| "}"
		| "~"
		| ExtendedChar -> OtherChar

        " "
		| "¡"
		| "¢"
		| "£"
		| "¤"
		| "¥"
		| "¦"
		| "§"
		| "¨"
		| "©"
		| "ª"
		| "«"
		| "¬"
		| "­"
		| "®"
		| "¯"
		| "°"
		| "±"
		| "²"
		| "³"
		| "´"
		| "µ"
		| "¶"
		| "·"
		| "¸"
		| "¹"
		| "º"
		| "»"
		| "¼"
		| "½"
		| "¾"
		| "¿"
		| "À"
		| "Á"
		| "Â"
		| "Ã"
		| "Ä"
		| "Å"
		| "Æ"
		| "Ç"
		| "È"
		| "É"
		| "Ê"
		| "Ë"
		| "Ì"
		| "Í"
		| "Î"
		| "Ï"
		| "Ð"
		| "Ñ"
		| "Ò"
		| "Ó"
		| "Ô"
		| "Õ"
		| "Ö"
		| "×"
		| "Ø"
		| "Ù"
		| "Ú"
		| "Û"
		| "Ü"
		| "Ý"
		| "Þ"
		| "ß"
		| "à"
		| "á"
		| "â"
		| "ã"
		| "ä"
		| "å"
		| "æ"
		| "ç"
		| "è"
		| "é"
		| "ê"
		| "ë"
		| "ì"
		| "í"
		| "î"
		| "ï"
		| "ð"
		| "ñ"
		| "ò"
		| "ó"
		| "ô"
		| "õ"
		| "ö"
		| "÷"
		| "ø"
		| "ù"
		| "ú"
		| "û"
		| "ü"
		| "ý"
		| "þ"
		| "ÿ" -> ExtendedChar
