Compilation = 'UNSAFE'? (Interface | Module) ;
Interface = 'INTERFACE' Ident ';' Import* Declaration* 'END' Ident '.' ;
Module = 'MODULE' Ident ('EXPORTS' IDList)? ';' Import* Block Ident '.' ;
Import = ('FROM' Ident)? 'IMPORT' IDList ';' ;
Block = Declaration* 'BEGIN' Stmts 'END' ;
Declaration = 'CONST' (ConstDecl ';')* ;
Declaration = 'TYPE' (TypeDecl ';')* ;
Declaration = 'EXCEPTION' (ExceptionDecl ';')* ;
Declaration = 'VAR' (VariableDecl ';')* ;
Declaration = ProcedureHead ('=' Block Ident)? ';' ;
Declaration = 'REVEAL' (TypeID ('=' | '<:') Type ';')* ;
ConstDecl = Ident (':' Type)? '=' ConstExpr ;
TypeDecl = Ident ('=' | '<:') Type ;
ExceptionDecl = Ident ('(' Type ')')? ;
VariableDecl = IDList ':' Type '&' ':=' Expr ;
ProcedureHead = 'PROCEDURE' Ident Signature ;
Signature = '(' Formals ')' (':' Type)? ('RAISES' Raises)? ;
Formals = (Formal (';' Formal)* ';'?)? ;
Formal = ('VALUE' | 'VAR' | 'READONLY')? IDList ':' Type '&' ':=' ConstExpr ;
Raises = '{' (ExceptionID (',' ExceptionID)*)? '}' ;
Stmts = (Stmt (';' Stmt)* ';'?)? ;
Stmt = AssignStmt ;
Stmt = Block ;
Stmt = CallStmt ;
Stmt = CaseStmt ;
Stmt = ExitStmt ;
Stmt = EvalStmt ;
Stmt = ForStmt ;
Stmt = IfStmt ;
Stmt = LockStmt ;
Stmt = LoopStmt ;
Stmt = RaiseStmt ;
Stmt = RepeatStmt ;
Stmt = ReturnStmt ;
Stmt = TryFinStmt ;
Stmt = TryXptStmt ;
Stmt = TCaseStmt ;
Stmt = WhileStmt ;
Stmt = WithStmt ;
AssignStmt = Expr ':=' Expr ;
CallStmt = Expr '(' (Actual (',' Actual)*)? ')' ;
CaseStmt = 'CASE' Expr 'OF' Case? ('|' Case)* ('ELSE' Stmts)? 'END' ;
ExitStmt = 'EXIT' ;
EvalStmt = 'EVAL' Expr ;
ForStmt = 'FOR' Ident ':=' Expt 'TO' Expr ('BY' Expr)? 'DO' Stmts 'END' ;
IfStmt = 'IF' Expr 'THEN' Stmts ('ELSIF' Expt 'THEN' Stmts)* ('ELSE' Stmts)? 'END' ;
LockStmt = 'LOCK' Expr 'DO' Stmts 'END' ;
LoopStmt = 'LOOP' Stmts 'END' ;
RaiseStmt = 'RAISE' ExceptionID ('(' Expr ')')? ;
Repeatstmt = 'REPEAT' Stmts 'UNTIL' Expr ;
ReturnStmt = 'RETURN' Expr? ;
TCaseStmt = 'TYPECASE' Expr 'OF' Tcase? ('|' Tcase)* ('ELSE' Stmts)? 'END' ;
TryXptStmt = 'TRY' Stmts 'EXCEPT' Handler? ('|' Handler)* ('ELSE' Stmts)? 'END' ;
TryFinStmt = 'TRY' Stmts 'FINALLY' Stmts 'END' ;
WhileStmt = 'WHILE' Expt 'DO' Stmts 'END' ;
WithStmt = 'WITH' Binding (',' Binding)* 'DO' Stmts 'END' ;
Case = Labels (',' Labels)* '=>' Stmts ;
Labels = ConstExpr ('..' ConstExpr)? ;
Handler = ExceptionID (',' ExceptionID)* ('(' Ident ')')? '=>' Stmts ;
Tcase = Type (',' Type)* ('(' Ident ')')? '=>' Stmts ;
Binding = Ident '=' Expr ;
Actual = (Ident ':=')? Expr ;
Actual = Type ;
Type = TypeName ;
Type = ArrayType ;
Type = PackedType ;
Type = EnumType ;
Type = ObjectType ;
Type = ProcedureType ;
Type = RecordType ;
Type = RefType ;
Type = SetType ;
Type = SubrangeType ;
Type = '(' Type ')' ;
ArrayType = 'ARRAY' (Type (',' Type)*)? 'OF' Type ;
PackedType = 'BITS' ConstExpr 'FOR' Type ;
EnumType = '{' IDList? '}' ;
ObjectType = Ancestor? Brand? 'OBJECT' Fields ('METHODS' Methods)? 'END' ;
ProcedureType = 'PROCEDURE' Signature ;
RecordType = 'RECORD' Fields 'END' ;
RefType = 'UNTRACED'? Brand? 'REF' Type ;
SetType = 'SET' 'OF' Type ;
SubrangeType = '[' ConstExpr '..' ConstExpr ']' ;
Ancestor = TypeName ;
Ancestor = ObjectType ;
Ancestor = 'UNTRACED' ;
Brand = 'BRANDED' TextLiteral? ;
Fields = (Field (';' Field)* ';'?)? ;
Field = IDList ':' Type '&' ':=' ConstExpr ;
Methods = (Method (';' Method)* ';'?)? ;
Method = Ident Signature '&' ':=' ProcedureID ;
ConstExpr = Expr ;
Expr = E1 ('OR' E1)* ;
E1 = E2 ('AND' E2)* ;
E2 = 'NOT'* E3 ;
E3 = E4 (Relop E4)* ;
E4 = E5 (Addop E5)* ;
E5 = E6 (Mulop E6)* ;
E6 = ('+' | '-')* E7 ;
E7 = E8 Selector* ;
E8 = Ident ;
E8 = Number ;
E8 = CharLiteral ;
E8 = TextLiteral ;
E8 = Constructor ;
E8 = '(' Expr ')' ;
Relop = '=' ;
Relop = '#' ;
Relop = '<' ;
Relop = '<=' ;
Relop = '>' ;
Relop = '>=' ;
Relop = 'IN' ;
Addop = '+' ;
Addop = '-' ;
Addop = '&' ;
Mulop = '*' ;
Mulop = '/' ;
Mulop = 'DIV' ;
Mulop = 'MOD' ;
Selector = '^' ;
Selector = '.' Ident ;
Selector = '[' Expr (',' Expr)* ']' ;
Selector = '(' (Actual (',' Actual)*)? ')' ;
Constructor = Type '{' (SetCons | RecordCons | ArrayCons)? '}' ;
SetCons = SetElt ('.' SetElt)* ;
SetElt = Expr ('..' Expr)? ;
RecordCons = RecordElt (',' RecordElt)* ;
RecordElt = (Ident ':=')? Expr ;
ArrayCons = Expr (',' Expr)* (',' '..')? ;
TypeName = Ident ('.' Ident)? ;
TypeName = 'ROOT' ;
TypeName = 'UNTRACED' 'ROOT' ;
ExceptionID = Ident ('.' Ident)? ;
ProcedureID = Ident ('.' Ident)? ;
IDList = Ident (',' Ident)* ;
Literal = Number ;
Literal = CharLiteral ;
Literal = TextLiteral ;
Ident = Letter (Letter | Digit | '_')* ;
Operator = '+' ;
Operator = '-' ;
Operator = '*' ;
Operator = '/' ;
Operator = '.' ;
Operator = '^' ;
Operator = ':' '=' ;
Operator = '=' ;
Operator = '$' ;
Operator = '<' ;
Operator = '<' '=' ;
Operator = '>' '=' ;
Operator = '>' ;
Operator = '&' ;
Operator = '<' ':' ;
Operator = '=' '>' ;
Operator = ',' ;
Operator = ';' ;
Operator = '|' ;
Operator = ':' ;
Operator = '.' '.' ;
Operator = '(' ;
Operator = ')' ;
Operator = '{' ;
Operator = '}' ;
Operator = '[' ;
Operator = ']' ;
CharLiteral = '’' (PrintingChar | Escape) '’' ;
TextLiteral = '"' (PrintingChar | Escape)* '"' ;
Escape = '\' 'n' ;
Escape = '\' 't' ;
Escape = '\' 'r' ;
Escape = '\' 'f' ;
Escape = '\' '\' ;
Escape = '\' '’' ;
Escape = '\' '"' ;
Escape = '\' OctalDigit OctalDigit OctalDigit ;
Number = Digit+ ;
Number = Digit+ '_' HexDigit+ ;
Number = Digit+ '.' Digit+ Exponent? ;
Exponent = ('E' | 'e' | 'D' | 'd') ('+' | '-')? Digit+ ;
PrintingChar = Letter ;
PrintingChar = Digit ;
PrintingChar = UtherChar ;
HexDigit = Digit ;
HexDigit = 'A' ;
HexDigit = 'B' ;
HexDigit = 'C' ;
HexDigit = 'D' ;
HexDigit = 'E' ;
HexDigit = 'F' ;
HexDigit = 'a' ;
HexDigit = 'b' ;
HexDigit = 'c' ;
HexDigit = 'd' ;
HexDigit = 'e' ;
HexDigit = 'f' ;
Digit = '0' ;
Digit = '1' ;
Digit = '2' ;
Digit = '3' ;
Digit = '4' ;
Digit = '5' ;
Digit = '6' ;
Digit = '7' ;
Digit = '8' ;
Digit = '9' ;
OctalDigit = '0' ;
OctalDigit = '1' ;
OctalDigit = '2' ;
OctalDigit = '3' ;
OctalDigit = '4' ;
OctalDigit = '5' ;
OctalDigit = '6' ;
OctalDigit = '7' ;
Letter = 'A' ;
Letter = 'B' ;
Letter = 'C' ;
Letter = 'D' ;
Letter = 'E' ;
Letter = 'F' ;
Letter = 'G' ;
Letter = 'H' ;
Letter = 'I' ;
Letter = 'J' ;
Letter = 'K' ;
Letter = 'L' ;
Letter = 'M' ;
Letter = 'N' ;
Letter = 'O' ;
Letter = 'P' ;
Letter = 'Q' ;
Letter = 'R' ;
Letter = 'S' ;
Letter = 'T' ;
Letter = 'U' ;
Letter = 'V' ;
Letter = 'W' ;
Letter = 'X' ;
Letter = 'Y' ;
Letter = 'Z' ;
Letter = 'a' ;
Letter = 'b' ;
Letter = 'c' ;
Letter = 'd' ;
Letter = 'e' ;
Letter = 'f' ;
Letter = 'g' ;
Letter = 'h' ;
Letter = 'i' ;
Letter = 'j' ;
Letter = 'k' ;
Letter = 'l' ;
Letter = 'm' ;
Letter = 'n' ;
Letter = 'o' ;
Letter = 'p' ;
Letter = 'q' ;
Letter = 'r' ;
Letter = 's' ;
Letter = 't' ;
Letter = 'u' ;
Letter = 'v' ;
Letter = 'w' ;
Letter = 'x' ;
Letter = 'y' ;
Letter = 'z' ;
OtherChar = ' ' ;
OtherChar = '!' ;
OtherChar = '#' ;
OtherChar = '$' ;
OtherChar = '%' ;
OtherChar = '&' ;
OtherChar = '(' ;
OtherChar = ')' ;
OtherChar = '*' ;
OtherChar = '+' ;
OtherChar = ',' ;
OtherChar = '-' ;
OtherChar = '.' ;
OtherChar = '/' ;
OtherChar = ':' ;
OtherChar = ';' ;
OtherChar = '<' ;
OtherChar = '=' ;
OtherChar = '>' ;
OtherChar = '?' ;
OtherChar = '@' ;
OtherChar = '[' ;
OtherChar = ']' ;
OtherChar = '^' ;
OtherChar = '_' ;
OtherChar = '‘' ;
OtherChar = '{' ;
OtherChar = '|' ;
OtherChar = '}' ;
OtherChar = '~' ;
OtherChar = ExtendedChar ;
ExtendedChar = ' ' ;
ExtendedChar = '¡' ;
ExtendedChar = '¢' ;
ExtendedChar = '£' ;
ExtendedChar = '¤' ;
ExtendedChar = '¥' ;
ExtendedChar = '¦' ;
ExtendedChar = '§' ;
ExtendedChar = '¨' ;
ExtendedChar = '©' ;
ExtendedChar = 'ª' ;
ExtendedChar = '«' ;
ExtendedChar = '¬' ;
ExtendedChar = '­' ;
ExtendedChar = '®' ;
ExtendedChar = '¯' ;
ExtendedChar = '°' ;
ExtendedChar = '±' ;
ExtendedChar = '²' ;
ExtendedChar = '³' ;
ExtendedChar = '´' ;
ExtendedChar = 'µ' ;
ExtendedChar = '¶' ;
ExtendedChar = '·' ;
ExtendedChar = '¸' ;
ExtendedChar = '¹' ;
ExtendedChar = 'º' ;
ExtendedChar = '»' ;
ExtendedChar = '¼' ;
ExtendedChar = '½' ;
ExtendedChar = '¾' ;
ExtendedChar = '¿' ;
ExtendedChar = 'À' ;
ExtendedChar = 'Á' ;
ExtendedChar = 'Â' ;
ExtendedChar = 'Ã' ;
ExtendedChar = 'Ä' ;
ExtendedChar = 'Å' ;
ExtendedChar = 'Æ' ;
ExtendedChar = 'Ç' ;
ExtendedChar = 'È' ;
ExtendedChar = 'É' ;
ExtendedChar = 'Ê' ;
ExtendedChar = 'Ë' ;
ExtendedChar = 'Ì' ;
ExtendedChar = 'Í' ;
ExtendedChar = 'Î' ;
ExtendedChar = 'Ï' ;
ExtendedChar = 'Ð' ;
ExtendedChar = 'Ñ' ;
ExtendedChar = 'Ò' ;
ExtendedChar = 'Ó' ;
ExtendedChar = 'Ô' ;
ExtendedChar = 'Õ' ;
ExtendedChar = 'Ö' ;
ExtendedChar = '×' ;
ExtendedChar = 'Ø' ;
ExtendedChar = 'Ù' ;
ExtendedChar = 'Ú' ;
ExtendedChar = 'Û' ;
ExtendedChar = 'Ü' ;
ExtendedChar = 'Ý' ;
ExtendedChar = 'Þ' ;
ExtendedChar = 'ß' ;
ExtendedChar = 'à' ;
ExtendedChar = 'á' ;
ExtendedChar = 'â' ;
ExtendedChar = 'ã' ;
ExtendedChar = 'ä' ;
ExtendedChar = 'å' ;
ExtendedChar = 'æ' ;
ExtendedChar = 'ç' ;
ExtendedChar = 'è' ;
ExtendedChar = 'é' ;
ExtendedChar = 'ê' ;
ExtendedChar = 'ë' ;
ExtendedChar = 'ì' ;
ExtendedChar = 'í' ;
ExtendedChar = 'î' ;
ExtendedChar = 'ï' ;
ExtendedChar = 'ð' ;
ExtendedChar = 'ñ' ;
ExtendedChar = 'ò' ;
ExtendedChar = 'ó' ;
ExtendedChar = 'ô' ;
ExtendedChar = 'õ' ;
ExtendedChar = 'ö' ;
ExtendedChar = '÷' ;
ExtendedChar = 'ø' ;
ExtendedChar = 'ù' ;
ExtendedChar = 'ú' ;
ExtendedChar = 'û' ;
ExtendedChar = 'ü' ;
ExtendedChar = 'ý' ;
ExtendedChar = 'þ' ;
ExtendedChar = 'ÿ' ;
