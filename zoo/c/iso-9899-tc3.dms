translation-unit = external-declaration ;
translation-unit = translation-unit external-declaration ;
external-declaration = function-definition ;
external-declaration = declaration ;
function-definition = declaration-specifiers declarator declaration-list? compound-statement ;
declaration-specifiers = storage-class-specifier declaration-specifiers? ;
declaration-specifiers = type-specifier declaration-specifiers? ;
declaration-specifiers = type-qualifier declaration-specifiers? ;
declaration-specifiers = function-specifier declaration-specifiers? ;
storage-class-specifier = 'typedef' ;
storage-class-specifier = 'extern' ;
storage-class-specifier = 'static' ;
storage-class-specifier = 'auto' ;
storage-class-specifier = 'register' ;
type-specifier = 'void' ;
type-specifier = 'char' ;
type-specifier = 'short' ;
type-specifier = 'int' ;
type-specifier = 'long' ;
type-specifier = 'float' ;
type-specifier = 'double' ;
type-specifier = 'signed' ;
type-specifier = 'unsigned' ;
type-specifier = '_Bool' ;
type-specifier = '_Complex' ;
type-specifier = struct-or-union-specifier ;
type-specifier = enum-specifier ;
type-specifier = typedef-name ;
struct-or-union-specifier = struct-or-union IDENTIFIER? '{' struct-declaration-list '}' ;
struct-or-union-specifier = struct-or-union IDENTIFIER ;
struct-or-union = 'struct' ;
struct-or-union = 'union' ;
struct-declaration-list = struct-declaration ;
struct-declaration-list = struct-declaration-list struct-declaration ;
struct-declaration = specifier-qualifier-list struct-declarator-list ';' ;
specifier-qualifier-list = type-specifier specifier-qualifier-list? ;
specifier-qualifier-list = type-qualifier specifier-qualifier-list? ;
type-qualifier = 'const' ;
type-qualifier = 'restrict' ;
type-qualifier = 'volatile' ;
struct-declarator-list = struct-declarator ;
struct-declarator-list = struct-declarator-list ',' struct-declarator ;
struct-declarator = declarator ;
struct-declarator = declarator? ':' constant-expression ;
declarator = pointer? direct-declarator ;
pointer = '*' type-qualifier-list? ;
pointer = '*' type-qualifier-list? pointer ;
type-qualifier-list = type-qualifier ;
type-qualifier-list = type-qualifier-list type-qualifier ;
direct-declarator = IDENTIFIER ;
direct-declarator = '(' declarator ')' ;
direct-declarator = direct-declarator '[' type-qualifier-list? assignment-expression? ']' ;
direct-declarator = direct-declarator '[' 'static' type-qualifier-list? assignment-expression ']' ;
direct-declarator = direct-declarator '[' type-qualifier-list 'static' assignment-expression ']' ;
direct-declarator = direct-declarator '[' type-qualifier-list? '*' ']' ;
direct-declarator = direct-declarator '(' parameter-type-list ')' ;
direct-declarator = direct-declarator '(' identifier-list? ')' ;
assignment-expression = conditional-expression ;
assignment-expression = unary-expression assignment-operator assignment-expression ;
conditional-expression = logical-OR-expression ;
conditional-expression = logical-OR-expression '?' expression ':' conditional-expression ;
logical-OR-expression = logical-AND-expression ;
logical-OR-expression = logical-OR-expression '||' logical-AND-expression ;
logical-AND-expression = inclusive-OR-expression ;
logical-AND-expression = logical-AND-expression '&&' inclusive-OR-expression ;
inclusive-OR-expression = exclusive-OR-expression ;
inclusive-OR-expression = inclusive-OR-expression '|' exclusive-OR-expression ;
exclusive-OR-expression = AND-expression ;
exclusive-OR-expression = exclusive-OR-expression '^' AND-expression ;
AND-expression = equality-expression ;
AND-expression = AND-expression '&' equality-expression ;
equality-expression = relational-expression ;
equality-expression = equality-expression '==' relational-expression ;
equality-expression = equality-expression '!=' relational-expression ;
relational-expression = shift-expression ;
relational-expression = relational-expression '<' shift-expression ;
relational-expression = relational-expression '>' shift-expression ;
relational-expression = relational-expression '<=' shift-expression ;
relational-expression = relational-expression '>=' shift-expression ;
shift-expression = additive-expression ;
shift-expression = shift-expression '<<' additive-expression ;
shift-expression = shift-expression '>>' additive-expression ;
additive-expression = multiplicative-expression ;
additive-expression = additive-expression '+' multiplicative-expression ;
additive-expression = additive-expression '-' multiplicative-expression ;
multiplicative-expression = cast-expression ;
multiplicative-expression = multiplicative-expression '*' cast-expression ;
multiplicative-expression = multiplicative-expression '/' cast-expression ;
multiplicative-expression = multiplicative-expression '%' cast-expression ;
cast-expression = unary-expression ;
cast-expression = '(' type-name ')' cast-expression ;
unary-expression = postfix-expression ;
unary-expression = '++' unary-expression ;
unary-expression = '--' unary-expression ;
unary-expression = unary-operator cast-expression ;
unary-expression = 'sizeof' unary-expression ;
unary-expression = 'sizeof' '(' type-name ')' ;
postfix-expression = primary-expression ;
postfix-expression = postfix-expression '[' expression ']' ;
postfix-expression = postfix-expression '(' argument-expression-list? ')' ;
postfix-expression = postfix-expression '.' IDENTIFIER ;
postfix-expression = postfix-expression '->' IDENTIFIER ;
postfix-expression = postfix-expression '++' ;
postfix-expression = postfix-expression '--' ;
postfix-expression = '(' type-name ')' '{' initializer-list '}' ;
postfix-expression = '(' type-name ')' '{' initializer-list ',' '}' ;
primary-expression = IDENTIFIER ;
primary-expression = constant ;
primary-expression = string-literal ;
primary-expression = '(' expression ')' ;
expression = assignment-expression ;
expression = expression ',' assignment-expression ;
argument-expression-list = assignment-expression ;
argument-expression-list = argument-expression-list ',' assignment-expression ;
type-name = specifier-qualifier-list abstract-declarator? ;
abstract-declarator = pointer ;
abstract-declarator = pointer? direct-abstract-declarator ;
direct-abstract-declarator = '(' abstract-declarator ')' ;
direct-abstract-declarator = direct-abstract-declarator? '[' type-qualifier-list? assignment-expression? ']' ;
direct-abstract-declarator = direct-abstract-declarator? '[' 'static' type-qualifier-list? assignment-expression ']' ;
direct-abstract-declarator = direct-abstract-declarator? '[' type-qualifier-list 'static' assignment-expression ']' ;
direct-abstract-declarator = direct-abstract-declarator? '[' '*' ']' ;
direct-abstract-declarator = direct-abstract-declarator? '(' parameter-type-list? ')' ;
parameter-type-list = parameter-list ;
parameter-type-list = parameter-list ',' '...' ;
parameter-list = parameter-declaration ;
parameter-list = parameter-list ',' parameter-declaration ;
parameter-declaration = declaration-specifiers declarator ;
parameter-declaration = declaration-specifiers abstract-declarator? ;
initializer-list = designation? initializer ;
initializer-list = initializer-list ',' designation? initializer ;
designation = designator-list '=' ;
designator-list = designator ;
designator-list = designator-list designator ;
designator = '[' constant-expression ']' ;
designator = '.' IDENTIFIER ;
constant-expression = conditional-expression ;
initializer = assignment-expression ;
initializer = '{' initializer-list '}' ;
initializer = '{' initializer-list ',' '}' ;
unary-operator = '&' ;
unary-operator = '*' ;
unary-operator = '+' ;
unary-operator = '-' ;
unary-operator = '~' ;
unary-operator = '!' ;
assignment-operator = '=' ;
assignment-operator = '*=' ;
assignment-operator = '/=' ;
assignment-operator = '%=' ;
assignment-operator = '+=' ;
assignment-operator = '-=' ;
assignment-operator = '<<=' ;
assignment-operator = '>>=' ;
assignment-operator = '&=' ;
assignment-operator = '^=' ;
assignment-operator = '|=' ;
identifier-list = IDENTIFIER ;
identifier-list = identifier-list ',' IDENTIFIER ;
enum-specifier = 'enum' IDENTIFIER? '{' enumerator-list '}' ;
enum-specifier = 'enum' IDENTIFIER? '{' enumerator-list ',' '}' ;
enum-specifier = 'enum' IDENTIFIER ;
enumerator-list = enumerator ;
enumerator-list = enumerator-list ',' enumerator ;
enumerator = enumeration-constant ;
enumerator = enumeration-constant '=' constant-expression ;
typedef-name = IDENTIFIER ;
function-specifier = 'inline' ;
declaration-list = declaration ;
declaration-list = declaration-list declaration ;
declaration = declaration-specifiers init-declarator-list? ';' ;
init-declarator-list = init-declarator ;
init-declarator-list = init-declarator-list ',' init-declarator ;
init-declarator = declarator ;
init-declarator = declarator '=' initializer ;
compound-statement = '{' block-item-list? '}' ;
block-item-list = block-item ;
block-item-list = block-item-list block-item ;
block-item = declaration ;
block-item = statement ;
statement = labeled-statement ;
statement = compound-statement ;
statement = expression-statement ;
statement = selection-statement ;
statement = iteration-statement ;
statement = jump-statement ;
labeled-statement = IDENTIFIER ':' statement ;
labeled-statement = 'case' constant-expression ':' statement ;
labeled-statement = 'default' ':' statement ;
expression-statement = expression? ';' ;
selection-statement = 'if' '(' expression ')' statement ;
selection-statement = 'if' '(' expression ')' statement 'else' statement ;
selection-statement = 'switch' '(' expression ')' statement ;
iteration-statement = 'while' '(' expression ')' statement ;
iteration-statement = 'do' statement 'while' '(' expression ')' ';' ;
iteration-statement = 'for' '(' expression? ';' expression? ';' expression? ')' statement ;
iteration-statement = 'for' '(' declaration expression? ';' expression? ')' statement ;
jump-statement = 'goto' IDENTIFIER ';' ;
jump-statement = 'continue' ';' ;
jump-statement = 'break' ';' ;
jump-statement = 'return' expression? ';' ;
