module Main

exports
  sorts
        Program Statement IncludeStatement KeysStatement Keyword CompoundsStatement Compound CommentsStatement CommentConvention TokensStatement TokenPattern DefineStatement RedefineStatement RedefineOrDefine RESET DotDotDotBar BarDotDotDot BarLiteralsAndTypes LiteralOrType Type FormatCues OptNL FormatCue FormatId TypeSpec TypeModifier TypeRepeater TypeidOrQuotedLiteral RuleStatement FunctionStatement DollarStar ExternalStatement FormalArgument ConstructDeconstructImportExportOrCondition Constructor Deconstructor Condition Importer Exporter SkippingType Pattern LiteralOrVariable Replacement LiteralOrExpression Expression RuleApplications RuleoptNL RuleApplication CommentNL NEWoptNL EachArgs VaridOrLiteral Literal QuotedLiteral UnquotedLiteral Varid Typeid Ruleid 
  context-free syntax
        Statement* -> Program

        IncludeStatement
		| KeysStatement
		| CompoundsStatement
		| CommentsStatement
		| TokensStatement
		| DefineStatement
		| RedefineStatement
		| RuleStatement
		| FunctionStatement
		| ExternalStatement
		| Comment NL -> Statement

        "include" Stringlit NL -> IncludeStatement

        "keys" NL IN Keyword* EX NL "end" "keys" NL NL -> KeysStatement

        Literal SP
		| Key SP -> Keyword

        "compounds" NL IN Compound* EX NL "end" "compounds" NL NL -> CompoundsStatement

        Literal SP -> Compound

        "comments" NL IN CommentConvention* EX "end" "comments" NL NL -> CommentsStatement

        Literal SP Literal NL
		| Literal NL -> CommentConvention

        "tokens" NL IN TokenPattern* EX "end" "tokens" NL NL -> TokensStatement

        Typeid TAB-24 Stringlit NL
		| TAB-16 "|" TAB-24 Stringlit NL
		| Typeid TAB-16 "..."? "|" TAB-24 Stringlit NL
		| Typeid TAB-16 "+" TAB-24 Stringlit NL
		| Comment NL -> TokenPattern

        "define" Typeid NL IN IN LiteralOrType* NL BarLiteralsAndTypes* EX EX "end" "define" NL NL RESET -> DefineStatement

        "redefine" Typeid NL IN IN DotDotDotBar? LiteralOrType* NL BarLiteralsAndTypes* BarDotDotDot? EX EX "end" RedefineOrDefine NL NL RESET -> RedefineStatement

        "redefine"
		| "define" -> RedefineOrDefine

        EX EX EX EX EX EX EX EX EX -> RESET

        "..." EX NL "|" TAB IN -> DotDotDotBar

        EX "|" TAB IN "..." NL -> BarDotDotDot

        EX "|" TAB IN LiteralOrType* NL -> BarLiteralsAndTypes

        Type SP
		| Literal SP -> LiteralOrType

        FormatCues
		| "[" TypeSpec "]" -> Type

        IN IN FormatCue+ EX EX OptNL? -> FormatCues

        LiteralOrType NL -> OptNL

        "[" FormatId "]" -> FormatCue

        "NL"
		| "IN" IN
		| "EX" EX -> FormatId

        TypeModifier? Typeid TypeRepeater?
		| "!" -> TypeSpec

        "opt"
		| "repeat"
		| "list"
		| "attr"
		| "see"
		| "not"
		| "push"
		| "pop"
		| ":"
		| "~"
		| ">"
		| "<" -> TypeModifier

        "+"
		| "*"
		| "?"
		| ","
		| ",+" -> TypeRepeater

        Typeid
		| QuotedLiteral -> TypeidOrQuotedLiteral

        "rule" Ruleid FormalArgument* NL IN IN ConstructDeconstructImportExportOrCondition* EX SkippingType? "replace" DollarStar? SP Type NL IN Pattern ConstructDeconstructImportExportOrCondition* EX "by" NL IN Replacement EX EX "end" "rule" NL NL
		| "rule" Ruleid FormalArgument* NL IN IN ConstructDeconstructImportExportOrCondition* EX SkippingType? "match" DollarStar? SP Type NL IN Pattern EX EX ConstructDeconstructImportExportOrCondition* "end" "rule" NL NL -> RuleStatement

        "function" Ruleid FormalArgument* NL IN IN ConstructDeconstructImportExportOrCondition* EX SkippingType? "replace" DollarStar? SP Type NL IN Pattern ConstructDeconstructImportExportOrCondition* EX "by" NL IN Replacement EX EX "end" "function" NL NL
		| "function" Ruleid FormalArgument* NL IN IN ConstructDeconstructImportExportOrCondition* EX SkippingType? "match" DollarStar? SP Type NL IN Pattern ConstructDeconstructImportExportOrCondition* EX EX "end" "function" NL NL -> FunctionStatement

        SP "$"
		| SP "*" -> DollarStar

        "external" "rule" Ruleid FormalArgument* NL NL
		| "external" "function" Ruleid FormalArgument* NL NL -> ExternalStatement

        Varid SP Type CommentNL* -> FormalArgument

        Constructor
		| Deconstructor
		| Condition
		| Importer
		| Exporter
		| EX Comment NL IN -> ConstructDeconstructImportExportOrCondition

        EX "construct" Varid SP Type NL IN Replacement -> Constructor

        EX SkippingType? "deconstruct" "not"? "*"? Type? Varid NL IN Pattern -> Deconstructor

        EX "where" "not"? "all"? NL IN CommentNL* Expression NL
		| EX "assert" "not"? "all"? NL IN CommentNL* Expression NL -> Condition

        EX "import" Varid Type? NL IN Pattern? -> Importer

        EX "export" Varid Type? NL IN Replacement? -> Exporter

        "skipping" SP Type CommentNL* -> SkippingType

        LiteralOrVariable* NL -> Pattern

        Literal SP
		| Varid SP Type SP
		| Varid SP -> LiteralOrVariable

        LiteralOrExpression* NL -> Replacement

        Literal SP
		| Expression SP -> LiteralOrExpression

        Varid RuleApplications? -> Expression

        IN IN CommentNL* RuleApplication+ EX EX RuleoptNL? -> RuleApplications

        LiteralOrExpression NL -> RuleoptNL

        SP "[" Ruleid VaridOrLiteral* EachArgs? "]" CommentNL*
		| SP Lengthrule VaridOrLiteral* EachArgs? "]" CommentNL* -> RuleApplication

        SP SP Comment NEWoptNL? -> CommentNL

        NL -> NEWoptNL

        SP "each" VaridOrLiteral* -> EachArgs

        SP Varid
		| SP Literal -> VaridOrLiteral

        QuotedLiteral
		| UnquotedLiteral
		| SP Comment NEWoptNL? -> Literal

        "'" UnquotedLiteral
		| "'" Key -> QuotedLiteral

        SP "'"
		| Token -> UnquotedLiteral

        Id -> Varid

        Id
		| SP Literal -> Typeid

        Id
		| Special
		| "#"
		| Key -> Ruleid
