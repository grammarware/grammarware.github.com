module Main

exports
  sorts
        Program Identifier Cidentifier Whitespace Comment COMMENT Operator Comparator ADD SUBTRACT MULTIPLY DIVIDE EXPONENTIATION EQUAL CONJ DISJ EQUALITY NON-EQUALITY LESS-THAN GREATER-THAN LESS-THAN-EQ GREATER-THAN-EQ QUESTION EXPONENT DOUBLE INT DONE SKIP TROLLEY CHECKOUT CONTAINS IF THEN ELSE PROC DO WHILE KEY-INT KEY-DOUBLE VAR CONST SEMI COMMA COLON CURLY-L CURLY-R DEFINED-AS RPAR LPAR CID ID WS Type Var Constant Proc Negation CondExpr BoolExpr AndExpr CompExpr Expr Expr2 MultExpr PowerExpr Atom Cond-expr Procedure-expr Dec Conditional Assignment Statement Loop EOF 
  context-free syntax
        TROLLEY Cidentifier CONTAINS Dec* CHECKOUT CURLY-L (Statement (SEMI Statement)*)? CURLY-R SEMI DONE SEMI EOF -> Program

        ID
		| CID -> Identifier

        CID -> Cidentifier

        WS -> Whitespace

        COMMENT -> Comment

        "/*" ANY* "*/" -> COMMENT

        ADD
		| SUBTRACT
		| MULTIPLY
		| DIVIDE
		| EXPONENTIATION
		| EQUAL -> Operator

        EQUALITY
		| NON-EQUALITY
		| LESS-THAN
		| GREATER-THAN
		| LESS-THAN-EQ
		| GREATER-THAN-EQ -> Comparator

        "+" -> ADD

        "-" -> SUBTRACT

        "*" -> MULTIPLY

        "/" -> DIVIDE

        MULTIPLY "*" -> EXPONENTIATION

        "=" -> EQUAL

        "/\\" -> CONJ

        "\\/" -> DISJ

        "==" -> EQUALITY

        "!=" -> NON-EQUALITY

        "<" -> LESS-THAN

        ">" -> GREATER-THAN

        "<=" -> LESS-THAN-EQ

        ">=" -> GREATER-THAN-EQ

        "?" -> QUESTION

        ("e" | "E") ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ -> EXPONENT

        INT "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT?
		| "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT?
		| INT EXPONENT
		| "." -> DOUBLE

        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ -> INT

        "done" -> DONE

        "skip" -> SKIP

        "trolley" -> TROLLEY

        "checkout" -> CHECKOUT

        "contains" -> CONTAINS

        "if" -> IF

        "then" -> THEN

        "else" -> ELSE

        "proc" -> PROC

        "do" -> DO

        "while" -> WHILE

        "int" -> KEY-INT

        "double" -> KEY-DOUBLE

        "var" -> VAR

        "const" -> CONST

        ";" -> SEMI

        "," -> COMMA

        ":" -> COLON

        "{" -> CURLY-L

        "}" -> CURLY-R

        ":=" -> DEFINED-AS

        ")" -> RPAR

        "(" -> LPAR

        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> CID

        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> ID

        (" " | "\t" | "\r" | "\n" | "\f")+ -> WS

        "int"
		| "double" -> Type

        "var" Identifier COLON Type SEMI -> Var

        "const" Cidentifier COLON Type DEFINED-AS Expr SEMI -> Constant

        "proc" Identifier "(" Identifier COLON Type (COMMA Identifier COLON Type)* ")" COLON Type DEFINED-AS Statement* SEMI -> Proc

        "-" -> Negation

        BoolExpr (QUESTION CondExpr COLON CondExpr)? -> CondExpr

        AndExpr (DISJ AndExpr)* -> BoolExpr

        CompExpr (CONJ CompExpr)* -> AndExpr

        Expr (Comparator Expr)? -> CompExpr

        Negation? Expr2 -> Expr

        MultExpr ((ADD | SUBTRACT) MultExpr)* -> Expr2

        PowerExpr ((MULTIPLY | DIVIDE) PowerExpr)* -> MultExpr

        Atom (EXPONENTIATION Atom)* -> PowerExpr

        INT
		| DOUBLE
		| ID
		| CID
		| LPAR CondExpr RPAR
		| Procedure-expr -> Atom

        QUESTION BoolExpr QUESTION Expr COLON Expr -> Cond-expr

        Identifier LPAR Expr (COMMA Expr)* RPAR -> Procedure-expr

        Constant
		| Var
		| Proc -> Dec

        IF CondExpr THEN Statement ELSE Statement -> Conditional

        Identifier DEFINED-AS Expr -> Assignment

        SKIP
		| Conditional
		| Loop
		| Assignment
		| Cond-expr
		| CURLY-L (SKIP | Conditional | Loop | Assignment | Cond-expr) (SEMI Statement)* CURLY-R -> Statement

        WHILE BoolExpr DO Statement -> Loop

         -> EOF
