module Main

exports
  sorts
        Program Declaration ConstDecl VarDecl ProcDecl Term Unary Exp Mult Add Relation Equality Disj Conj Expression ProcApp AppList Number Assign CondSt Loop ParamList ParamElem Statement StmtList StmtElem Type DONE SKIP TROLLEY CHECKOUT CONTAINS CONST VAR PROC IF THEN WHILE DO ELSE INT DOUB COLON DEFAS COMMA SEMI LPAR RPAR LBRACE RBRACE ADD SUB MULTOP MULT DIV EXP DISJUNC CONJUNC RELOP EQOP ET NET LT LTE GT GTE TE DIGIT UPPER LOWER INTEGER DOUBLE CONSTID ID WS 
  context-free syntax
        TROLLEY CONSTID CONTAINS (Declaration SEMI)* CHECKOUT Statement SEMI DONE SEMI -> Program

        ConstDecl
		| VarDecl
		| ProcDecl -> Declaration

        CONST CONSTID COLON t::Type DEFAS e::Expression -> ConstDecl

        VAR (a::ID | a::CONSTID) COLON t::Type -> VarDecl

        PROC (a::ID | a::CONSTID) LPAR p::ParamList RPAR COLON t::Type DEFAS st::Statement -> ProcDecl

        LPAR Expression RPAR
		| CONSTID p::ProcApp
		| ID p::ProcApp -> Term

        SUB* Term -> Unary

        a::Unary (EXP Unary)* -> Exp

        a::Exp (MULTOP b::Exp)* -> Mult

        a::Mult ((ADD | SUB) b::Mult)* -> Add

        a::Add (RELOP b::Add)? -> Relation

        a::Relation (EQOP b::Relation)? -> Equality

        a::Equality (DISJUNC b::Equality)* -> Disj

        a::Disj (CONJUNC b::Disj)* -> Conj

        a::Conj (TE b::Expression COLON c::Expression)? -> Expression

        
		| LPAR AppList RPAR -> ProcApp

        
		| e::Expression (COMMA f::Expression)* -> AppList

        INTEGER
		| DOUBLE -> Number

        (a::ID | a::CONSTID) DEFAS e::Expression -> Assign

        IF e::Expression THEN Statement ELSE Statement -> CondSt

        WHILE e::Expression DO Statement -> Loop

        
		| p::ParamElem (COMMA q::ParamElem)* -> ParamList

        ID COLON Type -> ParamElem

        StmtElem
		| StmtList -> Statement

        LBRACE s::StmtElem (SEMI t::StmtElem)* RBRACE -> StmtList

        SKIP
		| Assign
		| CondSt
		| Loop -> StmtElem

        INT
		| DOUB -> Type

        "done" -> DONE

        "skip" -> SKIP

        "trolley" -> TROLLEY

        "checkout" -> CHECKOUT

        "contains" -> CONTAINS

        "const" -> CONST

        "var" -> VAR

        "proc" -> PROC

        "if" -> IF

        "then" -> THEN

        "while" -> WHILE

        "do" -> DO

        "else" -> ELSE

        "int" -> INT

        "double" -> DOUB

        ":" -> COLON

        ":=" -> DEFAS

        "," -> COMMA

        ";" -> SEMI

        "(" -> LPAR

        ")" -> RPAR

        "{" -> LBRACE

        "}" -> RBRACE

        "+" -> ADD

        "-" -> SUB

        MULT
		| DIV -> MULTOP

        "*" -> MULT

        "/" -> DIV

        "**" -> EXP

        "/\\" -> DISJUNC

        "\\/" -> CONJUNC

        LT
		| LTE
		| GT
		| GTE -> RELOP

        ET
		| NET -> EQOP

        "==" -> ET

        "!=" -> NET

        "<" -> LT

        "<=" -> LTE

        ">" -> GT

        ">=" -> GTE

        "?" -> TE

        "0"
		| "1"
		| "2"
		| "3"
		| "4"
		| "5"
		| "6"
		| "7"
		| "8"
		| "9" -> DIGIT

        "A"
		| "B"
		| "C"
		| "D"
		| "E"
		| "F"
		| "G"
		| "H"
		| "I"
		| "J"
		| "K"
		| "L"
		| "M"
		| "N"
		| "O"
		| "P"
		| "Q"
		| "R"
		| "S"
		| "T"
		| "U"
		| "V"
		| "W"
		| "X"
		| "Y"
		| "Z" -> UPPER

        "a"
		| "b"
		| "c"
		| "d"
		| "e"
		| "f"
		| "g"
		| "h"
		| "i"
		| "j"
		| "k"
		| "l"
		| "m"
		| "n"
		| "o"
		| "p"
		| "q"
		| "r"
		| "s"
		| "t"
		| "u"
		| "v"
		| "w"
		| "x"
		| "y"
		| "z" -> LOWER

        ("+" | "-")? DIGIT+ -> INTEGER

        INTEGER? "." DIGIT* (("e" | "E") INTEGER)? -> DOUBLE

        UPPER (UPPER | DIGIT | "_")* -> CONSTID

        (UPPER | LOWER) (UPPER | LOWER | DIGIT | "_")* -> ID

        (" " | "\t" | "\r" | "\n")+ -> WS
